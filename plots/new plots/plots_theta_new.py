import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import make_interp_spline
plt.rcParams["font.family"] = "Times New Roman"
plt.rcParams.update({'font.size': 12})
"""
print(np.array2string(sim['x'],separator=','))
print(np.array2string(sim['h'],separator=','))
print(np.array2string(sim['v'],separator=','))
print(np.array2string(sim['control_alpha'],separator=','))
print(np.array2string(sim['gamma'],separator=','))
print(np.array2string(sim['control_x'],separator=','))
print(np.array2string(sim['control_z'],separator=','))
print(np.array2string(sim['max_spl_gl'],separator=','))
"""


num=30

#region mindt15
# minimum time +-15deg theta
dtt15 = 1.56221158
et15 = 26284512.37176733
tt15 = np.linspace(0,num*dtt15,num)
xt15 = np.array([   0.        ,  12.98803747,  35.03573486,  66.29840001, 106.83133755,
  155.99408292, 213.77755268, 279.48505492, 351.66712462, 429.3226868 ,
  511.57410259, 597.89198503, 687.78595344, 780.75900095, 876.38517725,
  974.2923117 ,1074.12591609,1175.60104542,1278.52308541,1382.79692096,
 1488.22671439,1594.60439606,1701.63605491,1809.25924908,1917.24090098,
 2025.37846365,2133.65470007,2241.8677775 ,2349.9397335 ,2457.98440259])
ht15 = np.array([0.00000000e+00,5.82457513e-02,8.23154075e-01,2.60180049e-01,
 7.42631283e-01,5.67589637e-01,4.26695227e-01,2.88185635e+00,
 7.73102168e+00,1.42662034e+01,2.22571449e+01,3.16672041e+01,
 4.22351654e+01,5.38275911e+01,6.62995241e+01,7.94332747e+01,
 9.30312158e+01,1.07115005e+02,1.21637073e+02,1.36609905e+02,
 1.52031392e+02,1.67832540e+02,1.83842444e+02,2.00025368e+02,
 2.16478222e+02,2.33252223e+02,2.49840276e+02,2.66888033e+02,
 2.84004938e+02,2.99946330e+02])
vt15 = np.array([ 5.        ,11.42695212,16.92024229,23.12503546,28.70304733,34.2510903 ,
 39.67929427,44.33192667,48.19665178,51.46517981,54.29122629,56.81515621,
 59.00788753,60.8961263 ,62.52466979,63.89896052,65.06409205,66.06922002,
 66.99850647,67.83961903,68.55714273,69.07660806,69.48295505,69.81674912,
 70.00263892,70.08487166,70.14244419,70.08883144,69.98064637,69.94839254])
at15 = np.array([ 0.09289638, 0.04356976, 0.03741211, 0.02906367, 0.01698583, 0.04852662,
  0.03615435, 0.00866011,-0.00518953,-0.01345299,-0.01976324,-0.02574773,
 -0.03029652,-0.03399595,-0.03638394,-0.03829818,-0.03876968,-0.0393896 ,
 -0.03969874,-0.04007487,-0.04041008,-0.04092669,-0.04100958,-0.04092871,
 -0.04010666,-0.04226499,-0.03919926,-0.04154865,-0.03866648,-0.05963875])
gt15 = np.array([ 0.        , 0.03325396, 0.00359672,-0.0066673 , 0.0108725 ,-0.01176792,
  0.01464661, 0.0552769 , 0.07666146, 0.09062848, 0.10303946, 0.11324256,
  0.12068607, 0.12715864, 0.13187533, 0.13443785, 0.13657692, 0.13909438,
  0.14131695, 0.14394669, 0.14648276, 0.14816481, 0.14877521, 0.14985146,
  0.15319083, 0.15266825, 0.15387982, 0.15658663, 0.15980439, 0.11447481])
cxt15 = np.array([2131.00544826,2160.88953189,2187.55871554,2216.75988965,2246.22477345,
 2221.68728028,2319.49626113,2318.27296398,2344.93927483,2316.67153342,
 2369.61798994,2393.99084281,2406.91980395,2425.83565824,2437.74672693,
 2429.46949811,2435.07049328,2443.09214318,2484.6351891 ,2485.99337194,
 2502.23816105,2447.45204295,2484.63511219,2446.57064621,2435.76889021,
 2423.36483091,2409.49365398,2395.57365794,2377.16783238,2369.52955314])
czt15 = np.array([1339.43290496,1381.3391429 ,1166.76104181,1276.90307795,1035.62963481,
  811.06456971, 786.70085989, 704.85051423, 622.97404642, 562.67656736,
  530.84208268, 496.40206398, 492.31486068, 490.37844748, 467.75719319,
  445.39456348, 414.79921595, 375.91088541, 337.4972601 , 301.80606838,
  263.5130626 , 231.04745098, 199.02496121, 169.11686807, 139.03625445,
  112.85672555, 101.06499108, 101.10758499, 101.55309361, 100.35737244])
#endregion


#region mindt30
# minimum time +-30deg theta
dtt30 = 0.99501457
et30 = 16941107.36665231
tt30 = np.linspace(0,num*dtt30,num)

xt30 = np.array([   0.        ,   8.04525901,  21.76015423,  40.46929828,  64.11751874,
   92.08056455, 123.66513585, 158.4703006 , 196.63574771, 238.35823424,
  283.32628188, 330.9952104 , 380.7189603 , 431.85625476, 483.84115445,
  536.22447143, 588.60317184, 640.56513433, 691.88849922, 742.48180443,
  792.31144859, 841.39370823, 889.7365833 , 937.31026844, 984.08238565,
 1029.98214865,1075.03747356,1119.35259426,1163.14991806,1206.74566498])
ht30 = np.array([0.00000000e+00,7.58106646e-02,5.74258336e-01,4.89452414e-01,
 1.78620366e-01,2.20645723e-01,1.12465739e+00,2.11631711e+00,
 1.46974221e+00,5.43208911e-01,1.04071661e+00,3.88157112e+00,
 9.25465325e+00,1.72339249e+01,2.76684927e+01,4.02021598e+01,
 5.46199643e+01,7.09275636e+01,8.86492118e+01,1.07305703e+02,
 1.26515069e+02,1.45978020e+02,1.65535308e+02,1.85169203e+02,
 2.04861883e+02,2.24642343e+02,2.44347537e+02,2.63747825e+02,
 2.82436001e+02,2.99939428e+02])
vt30 = np.array([ 5.        ,11.11796597,16.31331408,21.34615336,26.06242655,30.02942429,
 33.40389569,36.61181242,40.17091619,43.64588396,46.68366604,49.22131573,
 51.22884391,52.73173044,53.77973086,54.42506078,54.72524865,54.69540204,
 54.41154757,53.95220964,53.37862859,52.743391  ,52.07259554,51.37009717,
 50.62666056,49.82893868,49.01773242,48.22470203,47.50670732,46.97473666])
at30 = np.array(
[ 0.34921721, 0.34674953, 0.32237211, 0.36899806, 0.28310804, 0.21360412,
  0.08856769, 0.00896939, 0.04163961, 0.04739735, 0.04015624, 0.02520374,
  0.01562014, 0.00618927,-0.001603  ,-0.00563321,-0.00301008,-0.00750223,
 -0.00944572,-0.0103132 ,-0.01033568,-0.00901723,-0.00547949,-0.002884  ,
  0.00225399, 0.00328268, 0.00492126, 0.00186894, 0.00123844,-0.01241831])
gt30 = np.array([ 0.        , 0.03095635, 0.01901884,-0.01524347,-0.00850024, 0.01307295,
  0.03902756, 0.00677316,-0.02859941,-0.01006179, 0.03415659, 0.08373181,
  0.13136013, 0.17734242, 0.21742579, 0.25154469, 0.28668093, 0.31978563,
  0.34399892, 0.36158711, 0.37343361, 0.38113417, 0.38791214, 0.39476866,
  0.40280851, 0.41027176, 0.41373059, 0.4096133 , 0.39566285, 0.36289034])
cxt30 = np.array([2106.5929701 ,2118.61928068,2157.10420113,2198.33719464,2217.45272391,
 2234.05701756,2275.5155474 ,2288.16825166,2317.02948492,2294.55805283,
 2347.04266909,2371.36627099,2389.76982555,2411.19763849,2423.35255368,
 2419.27646119,2429.5916244 ,2430.42338886,2433.42578407,2428.04087593,
 2426.71697939,2421.51901783,2419.38999825,2416.9757968 ,2409.15227302,
 2404.90733758,2406.02637288,2393.37705581,2376.46116064,2369.8429717 ])
czt30 = np.array([1323.32676091,1343.45211092,1085.09305045,1066.87938645, 937.46103454,
  783.20548883, 673.4380467 , 594.1237388 , 540.67049582, 499.7859957 ,
  476.76025939, 448.86649185, 451.38839191, 458.61516921, 443.32304184,
  426.90143968, 401.18953413, 366.00683161, 331.00920722, 297.56510378,
  261.04398401, 229.47568998, 198.03207038, 168.49075658, 138.71463582,
  112.6825129 , 100.38958254, 100.32225495, 100.19570905, 100.00206111])
#endregion


#region mindt45
# minimum time +-45deg theta
dtt45 = 0.93160203
et45 = 16102327.10791086
tt45 = np.linspace(0,num*dtt45,num)

xt45 = np.array([   0.        ,   8.29195037,  23.12954103,  42.72751237,  66.65136592,
   93.88944079, 123.53856215, 155.39946091, 189.94412285, 227.54069924,
  268.24549222, 311.8258355 , 357.87065578, 405.88878666, 455.38791632,
  505.97395144, 557.32716305, 609.16313453, 661.25060357, 713.29957423,
  764.98747842, 815.94315113, 865.71638067, 913.79310732, 959.67241667,
 1002.87351495,1043.20337974,1080.6913673 ,1115.63154855,1148.42518373])
ht45 = np.array([0.00000000e+00,6.54352021e-02,3.41918069e-01,2.60481708e-01,
 1.02213578e+00,3.09481473e+00,6.49453668e+00,9.40022944e+00,
 9.77350767e+00,8.83948001e+00,8.04691475e+00,8.46223221e+00,
 1.06022906e+01,1.48130046e+01,2.11254231e+01,2.92214107e+01,
 3.88144658e+01,4.98850725e+01,6.22773973e+01,7.60913318e+01,
 9.14826961e+01,1.08601954e+02,1.27620132e+02,1.48680205e+02,
 1.71715461e+02,1.96550597e+02,2.22544118e+02,2.48971096e+02,
 2.75018109e+02,2.99998680e+02])
vt45 = np.array([ 5.        ,12.75193809,18.64521266,23.47732988,27.69886869,30.79824741,
 33.1831059 ,35.59789747,38.68602117,42.05840818,45.30234518,48.20210738,
 50.68892417,52.7269568 ,54.34169843,55.58460278,56.53102548,57.22492388,
 57.68098905,57.89234891,57.84824793,57.50723777,56.83526128,55.79336493,
 54.37123445,52.55728567,50.41279545,48.02941424,45.51952597,42.99983756])
at45 = np.array([ 6.46909088e-01, 7.38357591e-01, 6.70596598e-01, 4.40006551e-01,
  3.72400875e-01, 2.32866992e-01, 5.38412712e-02,-1.49111960e-02,
  2.97654281e-02, 3.76412210e-02, 3.73101294e-02, 2.57837827e-02,
  1.70374665e-02, 6.84489810e-03,-3.62483917e-03,-1.08122105e-02,
 -1.13073536e-02,-1.50608735e-02,-1.33067626e-02,-1.14391892e-02,
 -8.71139264e-03,-4.75329675e-03, 1.22444731e-03, 5.26336576e-03,
  1.30542684e-02, 1.28394890e-02, 1.48530608e-02, 1.13936657e-02,
  1.56025682e-02, 1.82208617e-04])
gt45 = np.array([ 0.        , 0.01947122, 0.00364761, 0.00587642, 0.05461682, 0.0959403 ,
  0.11962607, 0.05132134,-0.01622385,-0.02736992,-0.00762065, 0.02701399,
  0.06647154, 0.10793288, 0.14407012, 0.17203716, 0.19773491, 0.22208375,
  0.2457788 , 0.27370235, 0.3058863 , 0.34337841, 0.388045  , 0.43833179,
  0.49375458, 0.54860232, 0.59554564, 0.62975905, 0.6500155 , 0.64507254])
cxt45 = np.array([2108.21839382,2114.98412128,2154.28105895,2199.12005855,2226.31677026,
 2250.20909334,2270.24766447,2290.64679911,2306.99222484,2329.01130227,
 2350.01397715,2374.41576339,2392.92850698,2411.05791457,2428.72630556,
 2422.71832654,2439.08823557,2450.44903482,2446.76009332,2455.16268963,
 2457.62194217,2449.67099368,2448.61494944,2437.12629976,2435.79045374,
 2416.71047943,2405.51438075,2387.91305456,2373.68990521,2356.25982406])
czt45 = np.array([1371.68754393,1392.18225418,1095.0544926 ,1155.20798695, 983.8433814 ,
  796.66675861, 674.22507181, 591.50222269, 538.72318459, 498.19192297,
  476.34476767, 449.06324546, 451.6990456 , 458.75350379, 443.14916308,
  426.475288  , 400.61273221, 365.3789309 , 330.48496756, 297.15241556,
  260.71056963, 229.20567974, 197.81627746, 168.33258487, 138.58757303,
  112.54289592, 100.26840656, 100.23849373, 100.18987931, 100.04113271])
#endregion


#region mine45
# minimum energy +-45deg theta
dte45 = 2.77306984
ee45 = 13316143.22702323
te45 = np.linspace(0,num*dte45,num)

xe45 = np.array([   0.        ,  40.59485445, 114.83263808, 206.04761845, 306.56795726,
  414.31531694, 528.86258703, 650.17580385, 778.62227186, 913.17842162,
 1050.37528702,1187.03244043,1321.96065144,1455.57190001,1588.84835937,
 1722.52463931,1856.82049642,1991.58702026,2126.47988636,2261.07013115,
 2395.04668632,2528.53723906,2662.29566812,2797.46438113,2934.82652152,
 3073.68801683,3211.05108753,3342.47587646,3465.6035074 ,3584.38408734])
he45 = np.array([0.00000000e+00,1.12396978e-01,1.77841866e-01,1.57903583e-01,
 1.96152046e-01,2.02723002e-01,2.67618571e-01,2.84573631e-01,
 3.33408047e-01,4.92151982e+00,1.63917936e+01,3.24055267e+01,
 4.93323395e+01,6.47330393e+01,7.81868924e+01,9.06003067e+01,
 1.02998430e+02,1.15930511e+02,1.29600013e+02,1.43945735e+02,
 1.58490362e+02,1.72276983e+02,1.84299566e+02,1.94417842e+02,
 2.04233451e+02,2.17103885e+02,2.36354814e+02,2.61839530e+02,
 2.86963250e+02,2.99999648e+02])
ve45 = np.array([ 5.        ,22.30394799,30.5096649 ,34.83352528,37.58908382,40.09032502,
 42.51777525,45.0053956 ,47.58169648,49.33000815,49.78749675,49.36662607,
 48.72411979,48.33829034,48.32175284,48.51950732,48.7424814 ,48.88176302,
 48.87888203,48.71855009,48.47715042,48.35150487,48.57791999,49.23925152,
 50.06022684,50.37675971,49.42653804,46.91657689,43.85528012,42.9999921 ])
ae45 = np.array([0.78527812,0.47909179,0.19190152,0.13834539,0.10008577,0.07265896,
 0.05348092,0.03206181,0.02789356,0.02177015,0.0145613 ,0.01075918,
 0.01001145,0.01166617,0.01379595,0.01476192,0.01453421,0.01425607,
 0.01438977,0.0146819 ,0.01446179,0.01336206,0.01186817,0.01122132,
 0.01287388,0.01739061,0.02351657,0.02863822,0.02025663,0.00838149])
ge45 = np.array([ 0.00000000e+00, 3.19631265e-03,-3.85602080e-03, 2.29722339e-04,
  1.81829710e-04, 2.50626686e-04, 1.26253360e-03,-2.93072543e-03,
  1.11921217e-02, 5.90311082e-02, 1.04208932e-01, 1.24799254e-01,
  1.21792644e-01, 1.07297302e-01, 9.51997127e-02, 9.12833203e-02,
  9.33905673e-02, 9.81583826e-02, 1.03814306e-01, 1.08078665e-01,
  1.07027071e-01, 9.74084403e-02, 8.15109703e-02, 6.97491416e-02,
  7.69299247e-02, 1.12295924e-01, 1.67483572e-01, 2.09966891e-01,
  1.73764337e-01, 3.32270293e-02])
cxe45 = np.array([1386.82574967,1818.52648866,1711.14743268,1414.7856037 ,1373.66722245,
 1359.39656531,1382.15043679,1415.8901527 ,1478.16280023,1517.78072029,
 1528.84250423,1521.20299268,1507.5043767 ,1498.82570752,1498.44929634,
 1504.01512024,1511.68745516,1516.88060674,1516.20507033,1509.12180736,
 1499.42996139,1493.12246303,1498.18358046,1520.76447889,1552.93998367,
 1572.91248473,1550.80954158,1461.26068769,1333.84166778,1277.71665798])
cze45 = np.array([1569.10055711,1118.32668108, 684.03223827, 359.44005002, 205.47267889,
  173.54146957, 107.53335732, 100.17106929,  99.98169969,  99.98377333,
   99.9852126 ,  99.98688744,  99.98882723,  99.99067053,  99.99217397,
   99.99331497,  99.99416374,  99.99483676,  99.99540308,  99.99587597,
   99.996252  ,  99.99653931,  99.99677559,  99.99702698,  99.99735418,
   99.99775856,  99.99815273,  99.99836726,  99.99824996,  99.99907686])
#endregion


#region mine30
# minimum energy +-30deg theta
dte30 = 2.87564261
ee30 = 13541293.82427223
te30 = np.linspace(0,num*dte30,num)

xe30 = np.array([   0.        ,  38.48854728, 113.27709563, 207.79380624, 311.70285709,
  423.10582217, 541.95194526, 667.88749703, 801.07397977, 940.35162952,
 1082.02669123,1222.96596807,1362.19102487,1500.15172617,1637.80926353,
 1775.86243586,1914.56386463,2053.81952843,2193.28952788,2332.55327687,
 2471.27887198,2609.45319914,2747.67710268,2887.12094058,3028.78324891,
 3172.24709583,3314.58792538,3451.03549323,3578.81200357,3701.94675846])
he30 = np.array([0.00000000e+00,8.91337941e-02,2.37441784e-01,1.71880777e-01,
 2.45017787e-01,3.10715025e-01,2.93906999e-01,3.65520845e-01,
 6.11759545e-01,5.60722735e+00,1.76477051e+01,3.37302323e+01,
 5.02808766e+01,6.53401785e+01,7.86189647e+01,9.09924861e+01,
 1.03234016e+02,1.15886245e+02,1.29272027e+02,1.43392821e+02,
 1.57894794e+02,1.71992618e+02,1.84587336e+02,1.95171920e+02,
 2.05059868e+02,2.17583968e+02,2.36401448e+02,2.61792076e+02,
 2.87137153e+02,2.99998476e+02])
ve30 = np.array([ 5.        ,21.08720343,30.24185278,34.83231423,37.42805841,40.04258854,
 42.57622722,45.03266562,47.54180346,49.19205565,49.52677106,49.0678745 ,
 48.4638283 ,48.11534421,48.11370502,48.30295617,48.53467781,48.69780392,
 48.72553693,48.60813437,48.39463067,48.23231467,48.36830368,48.96056269,
 49.79945769,50.2253965 ,49.38962292,46.91681433,43.81869864,42.99991728])
ae30 = np.array([0.50321576,0.46426393,0.20015372,0.14115306,0.10322884,0.07205352,
 0.05353747,0.0322337 ,0.02778826,0.0222525 ,0.01438845,0.01144554,
 0.0118174 ,0.01336717,0.01539875,0.01563898,0.01539006,0.01521079,
 0.01521951,0.01549537,0.01563387,0.01473801,0.01302393,0.0120701 ,
 0.01317526,0.017239  ,0.02345822,0.02923333,0.02196632,0.00863169])
ge30 = np.array([ 0.00000000e+00, 2.77082196e-03,-5.56111383e-03, 6.66071449e-04,
  6.46173579e-04, 7.06421785e-05, 8.20654957e-04,-1.80832401e-03,
  1.27939847e-02, 6.10935466e-02, 1.03833915e-01, 1.19428854e-01,
  1.15060051e-01, 1.02014275e-01, 9.16349732e-02, 8.79279311e-02,
  8.87276780e-02, 9.28720654e-02, 9.85067020e-02, 1.03246516e-01,
  1.04234565e-01, 9.77057603e-02, 8.31700087e-02, 6.97869234e-02,
  7.34064553e-02, 1.05284786e-01, 1.59309864e-01, 2.03367833e-01,
  1.69377873e-01, 2.62118778e-02])
cxe30 = np.array([1814.21813449,1796.26493877,1820.80540586,1329.50399266,1369.09304933,
 1376.40244471,1363.82594352,1393.95646954,1454.92253978,1496.85529444,
 1505.84560035,1494.91758753,1481.14828467,1474.97736767,1476.10799375,
 1481.09812125,1486.44522454,1490.61045506,1493.69977037,1492.51374446,
 1485.94655255,1479.56510843,1483.10075211,1504.11382573,1538.51356775,
 1560.55989738,1534.73045413,1447.82000501,1318.96203268,1260.17591277])
cze30 = np.array([1398.39185847,1161.57699709, 684.72171036, 359.04113021, 205.27899773,
  173.44041775, 107.47874033, 100.12837251,  99.94223352,  99.94900645,
   99.95441964,  99.96020334,  99.96636118,  99.97193844,  99.97635528,
   99.97964825,  99.98213502,  99.98416316,  99.98591986,  99.98743256,
   99.98865868,  99.98958179,  99.99029102,  99.99099433,  99.99191745,
   99.99311878,  99.9943439 ,  99.99506104,  99.99468696,  99.99718599])
#endregion


#region mine15
# minimum energy +-15deg theta
dte15 = 4.09815635
ee15 = 13670502.06273445
te15 = np.linspace(0,num*dte15,num)
xe15 = np.array([   0.        ,  60.83154796, 202.356363  , 361.16517503, 530.44061318,
  709.54363709, 898.70057682,1093.78576504,1290.67363973,1488.01062596,
 1685.40410315,1882.60415742,2079.61220494,2277.00089914,2474.93590998,
 2673.12642689,2871.61063827,3070.10183621,3268.53397753,3466.74444636,
 3664.7520867 ,3862.75277791,4060.8166377 ,4258.98771904,4456.94152388,
 4653.99049926,4849.29589652,5040.91917614,5226.96578896,5405.65586208])
he15 = np.array([0.00000000e+00,1.37193464e-01,1.06765372e-01,1.90593641e-01,
 2.37812515e-01,2.34530252e-01,1.77594020e+00,1.06772140e+01,
 2.24671070e+01,3.53643146e+01,4.83713405e+01,6.14118190e+01,
 7.39249571e+01,8.62488310e+01,9.85928598e+01,1.11102047e+02,
 1.23591318e+02,1.36743504e+02,1.49826225e+02,1.63199290e+02,
 1.76254778e+02,1.89163627e+02,2.01994512e+02,2.14842050e+02,
 2.28286624e+02,2.42159731e+02,2.56667232e+02,2.72265577e+02,
 2.87734376e+02,3.00000670e+02])
ve15 = np.array([ 5.        ,27.66532275,37.7300479 ,40.02019403,42.49852952,44.94756559,
 47.177416  ,47.98290869,48.23345906,48.26740684,48.26549554,48.17516407,
 48.19525719,48.3292564 ,48.43710682,48.48447097,48.55714058,48.52528479,
 48.51578012,48.43689651,48.41409078,48.42253517,48.44239208,48.46275947,
 48.33766595,48.04048251,47.46140811,46.28719487,44.73504829,42.99993124])
ae15 = np.array([0.13971572,0.29090613,0.06589218,0.07690007,0.04962065,0.03357129,
 0.02976679,0.01762385,0.0168632 ,0.01544885,0.01611832,0.01591213,
 0.01658434,0.01588328,0.01589507,0.01508618,0.0162426 ,0.01503842,
 0.01637059,0.01584014,0.01661815,0.0167022 ,0.01664888,0.01745861,
 0.01791719,0.01965394,0.0244246 ,0.0290087 ,0.04337035,0.03200187])
ge15 = np.array(
[ 0.        ,-0.13773515, 0.03589008,-0.01032168, 0.00367344,-0.00229235,
  0.02600486, 0.05685778, 0.06308777, 0.06599887, 0.06608366, 0.06506947,
  0.06255347, 0.06203896, 0.06290145, 0.06246345, 0.06459888, 0.0661791 ,
  0.0666096 , 0.0669977 , 0.06520612, 0.06497951, 0.06429909, 0.06592354,
  0.06922922, 0.07119727, 0.07811458, 0.08131546, 0.08766398, 0.02820889])
cxe15 = np.array([1558.0257121 ,2661.0024776 ,1065.48056779,1217.60491811,1200.41499841,
 1242.97426971,1297.15051845,1307.93564819,1311.00669571,1312.75739152,
 1307.88616147,1288.98252856,1308.89899127,1313.89889051,1305.61100515,
 1307.71088121,1314.42100126,1317.56768247,1317.6013081 ,1314.86588866,
 1315.22872875,1316.66756414,1315.17438304,1319.70582792,1308.748815  ,
 1292.68672729,1261.05837916,1172.75814717,1133.72925689, 831.29331416])
cze15 = np.array([1190.15619839, 886.36823288, 332.91322136, 244.7169331 , 180.99762291,
  162.72667711, 102.87990789,  97.05855375,  97.35169039,  97.81795203,
   98.19694952,  98.49732505,  98.73033228,  98.91650868,  99.06657472,
   99.18904353,  99.28777605,  99.36968013,  99.43915237,  99.49929183,
   99.55153217,  99.59804359,  99.64083253,  99.68101073,  99.72250713,
   99.7639008 ,  99.81586122,  99.86433468,  99.93049513,  99.93106476])
#endregion




# h vs x min e
plt.rcParams['figure.figsize'] = [11, 2.5]

eSpline45 = make_interp_spline(xe45,he45)
ixe45 = np.linspace(xe45.min(), xe45.max(), 500)
ihe45 = eSpline45(ixe45)

eSpline30 = make_interp_spline(xe30,he30)
ixe30 = np.linspace(xe30.min(), xe30.max(), 500)
ihe30 = eSpline30(ixe30)

eSpline15 = make_interp_spline(xe15,he15)
ixe15 = np.linspace(xe15.min(), xe15.max(), 500)
ihe15 = eSpline15(ixe15)

target_altitude = np.ones(num)*300
plt.plot(xe15,target_altitude,color='k',linestyle='dashed',linewidth=1)
plt.scatter(xe45,he45,color='navy',marker='^')
plt.scatter(xe30,he30,color='blue',marker='D')
plt.scatter(xe15,he15,color='royalblue',marker='s')
plt.legend(['target altitude', 'minimum energy 'r'$|\theta| \leq 45^{\circ}$', 'minimum energy 'r'$|\theta| \leq 30^{\circ}$', 'minimum energy 'r'$|\theta| \leq 15^{\circ}$'], frameon=False)

plt.plot(ixe45,ihe45,color='navy',linestyle='solid',linewidth=2)
plt.plot(ixe30,ihe30,color='blue',linestyle='solid',linewidth=2)
#plt.plot(ixe25,ihe25,color='blue',linestyle='solid',linewidth=2)
#plt.plot(ixe20,ihe20,color='cornflowerblue',linestyle='solid',linewidth=2)
plt.plot(ixe15,ihe15,color='royalblue',linestyle='solid',linewidth=2)
plt.xlabel('horizontal displacement (m)')
plt.ylabel('altitude (m)')
plt.savefig('new_e_theta_h_vs_x.png', dpi=1200, bbox_inches='tight')
plt.show()


# h vs x min dt
plt.rcParams['figure.figsize'] = [11, 2.5]

tSpline45 = make_interp_spline(xt45,ht45)
ixt45 = np.linspace(xt45.min(), xt45.max(), 500)
iht45 = tSpline45(ixt45)

tSpline30 = make_interp_spline(xt30,ht30)
ixt30 = np.linspace(xt30.min(), xt30.max(), 500)
iht30 = tSpline30(ixt30)

tSpline15 = make_interp_spline(xt15,ht15)
ixt15 = np.linspace(xt15.min(), xt15.max(), 500)
iht15 = tSpline15(ixt15)

target_altitude = np.ones(num)*300
plt.plot(xt15,target_altitude,color='k',linestyle='dashed',linewidth=1)
plt.scatter(xt45,ht45,color='darkred',marker='o')
plt.scatter(xt30,ht30,color='red',marker='d')
plt.scatter(xt15,ht15,color='indianred',marker='P')
plt.legend(['target altitude', 'minimum time 'r'$|\theta| \leq 45^{\circ}$', 'minimum time 'r'$|\theta| \leq 30^{\circ}$', 'minimum time 'r'$|\theta| \leq 15^{\circ}$'], frameon=False)

plt.plot(ixt45,iht45,color='darkred',linestyle='solid',linewidth=2)
plt.plot(ixt30,iht30,color='red',linestyle='solid',linewidth=2)
#plt.plot(ixt25,iht25,color='red',linestyle='solid',linewidth=2)
#plt.plot(ixt20,iht20,color='indianred',linestyle='solid',linewidth=2)
plt.plot(ixt15,iht15,color='indianred',linestyle='solid',linewidth=2)
plt.xlabel('horizontal displacement (m)')
plt.ylabel('altitude (m)')
# plt.legend(['target altitude', 'minimum time 'r'$|\theta| \leq 45^{\circ}$', 'minimum time 'r'$|\theta| \leq 30^{\circ}$', 'minimum time 'r'$|\theta| \leq 25^{\circ}$', 'minimum time 'r'$|\theta| \leq 20^{\circ}$', 'minimum time 'r'$|\theta| \leq 15^{\circ}$'], frameon=False)
plt.savefig('new_t_theta_h_vs_x.png', dpi=1200, bbox_inches='tight')
plt.show()




# theta vs t min dt
plt.rcParams['figure.figsize'] = [5, 2.5]

tSpline45 = make_interp_spline(tt45,np.rad2deg(gt45+at45))
itt45 = np.linspace(tt45.min(), tt45.max(), 500)
igt45 = tSpline45(itt45)

tSpline30 = make_interp_spline(tt30,np.rad2deg(gt30+at30))
itt30 = np.linspace(tt30.min(), tt30.max(), 500)
igt30 = tSpline30(itt30)

tSpline15 = make_interp_spline(tt15,np.rad2deg(gt15+at15))
itt15 = np.linspace(tt15.min(), tt15.max(), 500)
igt15 = tSpline15(itt15)


plt.scatter(tt45,np.rad2deg(gt45+at45),color='darkred',marker='o')
plt.scatter(tt30,np.rad2deg(gt30+at30),color='red',marker='d')
plt.scatter(tt15,np.rad2deg(gt15+at15),color='indianred',marker='P')
plt.legend(['minimum time 'r'$|\theta| \leq 45^{\circ}$', 'minimum time 'r'$|\theta| \leq 30^{\circ}$', 'minimum time 'r'$|\theta| \leq 15^{\circ}$'], frameon=False)

th45 = np.ones(num)*45
th30 = np.ones(num)*30
th15 = np.ones(num)*15
plt.plot(tt15,th45,color='k',linestyle='dashed',linewidth=1)
plt.plot(tt15,th30,color='k',linestyle='dashed',linewidth=1)
plt.plot(tt15,th15,color='k',linestyle='dashed',linewidth=1)

plt.plot(itt45,igt45,color='darkred',linestyle='solid',linewidth=2)
plt.plot(itt30,igt30,color='red',linestyle='solid',linewidth=2)
plt.plot(itt15,igt15,color='indianred',linestyle='solid',linewidth=2)
plt.xlabel('time (s)')
plt.ylabel('pitch angle 'r'$(^{\circ})$')
# plt.legend(['minimum time 'r'$|\theta| \leq 45^{\circ}$', 'minimum time 'r'$|\theta| \leq 30^{\circ}$', 'minimum time 'r'$|\theta| \leq 25^{\circ}$', 'minimum time 'r'$|\theta| \leq 20^{\circ}$', 'minimum time 'r'$|\theta| \leq 15^{\circ}$'], frameon=False)
plt.savefig('new_t_theta_vs_t.png', dpi=1200, bbox_inches='tight')
plt.show()






# theta vs t min e
plt.rcParams['figure.figsize'] = [5, 2.5]

eSpline45 = make_interp_spline(te45,np.rad2deg(ge45+ae45))
ite45 = np.linspace(te45.min(), te45.max(), 500)
ige45 = eSpline45(ite45)

eSpline30 = make_interp_spline(te30,np.rad2deg(ge30+ae30))
ite30 = np.linspace(te30.min(), te30.max(), 500)
ige30 = eSpline30(ite30)

eSpline15 = make_interp_spline(te15,np.rad2deg(ge15+ae15))
ite15 = np.linspace(te15.min(), te15.max(), 500)
ige15 = eSpline15(ite15)

plt.scatter(te45,np.rad2deg(ge45+ae45),color='navy',marker='^')
plt.scatter(te30,np.rad2deg(ge30+ae30),color='blue',marker='D')
plt.scatter(te15,np.rad2deg(ge15+ae15),color='royalblue',marker='s')
plt.legend(['minimum energy 'r'$|\theta| \leq 45^{\circ}$', 'minimum energy 'r'$|\theta| \leq 30^{\circ}$', 'minimum energy 'r'$|\theta| \leq 15^{\circ}$'], frameon=False)

th45 = np.ones(num)*45
th30 = np.ones(num)*30
th15 = np.ones(num)*15
plt.plot(te15,th45,color='k',linestyle='dashed',linewidth=1)
plt.plot(te15,th30,color='k',linestyle='dashed',linewidth=1)
plt.plot(te15,th15,color='k',linestyle='dashed',linewidth=1)

plt.plot(ite45,ige45,color='navy',linestyle='solid',linewidth=2)
plt.plot(ite30,ige30,color='blue',linestyle='solid',linewidth=2)
plt.plot(ite15,ige15,color='royalblue',linestyle='solid',linewidth=2)
plt.xlabel('time (s)')
plt.ylabel('pitch angle 'r'$(^{\circ})$')
# plt.legend(['minimum time 'r'$|\theta| \leq 45^{\circ}$', 'minimum time 'r'$|\theta| \leq 30^{\circ}$', 'minimum time 'r'$|\theta| \leq 25^{\circ}$', 'minimum time 'r'$|\theta| \leq 20^{\circ}$', 'minimum time 'r'$|\theta| \leq 15^{\circ}$'], frameon=False)
plt.savefig('new_e_theta_vs_t.png', dpi=1200, bbox_inches='tight')
plt.show()
