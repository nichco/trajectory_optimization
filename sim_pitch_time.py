from vedo import *
import numpy as np
from scipy.interpolate import make_interp_spline

#region data 15deg
xe = np.array([   0.        ,  11.40869981,  30.90315296,  58.58677942,  95.14337052,
  141.32953385, 196.34395901, 258.52176766, 328.21265877, 404.51782122,
  486.291487  , 572.70370867, 663.06083053, 756.81782253, 853.48590152,
  952.66430232,1053.92075851,1156.93056371,1261.51609542,1367.44987476,
 1474.50885127,1582.52442929,1691.34111519,1800.80194165,1910.76178042,
 2021.14375781,2131.83732992,2242.63469213,2353.24166505,2463.92071505])
he = np.array([ 0.00000000e+00,-9.01385679e-02, 1.14642289e-01, 1.04376125e+00,
  1.03398422e+00, 2.13276131e-01, 7.79619608e-02, 2.33533088e-01,
  1.95842608e+00, 6.77044896e+00, 1.37271569e+01, 2.25602256e+01,
  3.28838270e+01, 4.43132066e+01, 5.67508948e+01, 6.99273018e+01,
  8.41184317e+01, 9.89038425e+01, 1.13922186e+02, 1.29403253e+02,
  1.45356842e+02, 1.61680681e+02, 1.78338472e+02, 1.95361309e+02,
  2.12738369e+02, 2.30307273e+02, 2.48053018e+02, 2.65881797e+02,
  2.83978602e+02, 3.00065180e+02])
ae = np.array([ 0.02363588,-0.01122727, 0.01100978, 0.04749881, 0.0954053 , 0.09268304,
  0.04158612, 0.03084285, 0.01847124,-0.00682751,-0.01537006,-0.02363553,
 -0.03019941,-0.03388366,-0.03766433,-0.03778307,-0.04029188,-0.04175379,
 -0.04125156,-0.0417529 ,-0.04218436,-0.04244542,-0.04250701,-0.04251777,
 -0.04308061,-0.04283945,-0.04366824,-0.04148838,-0.04664568,-0.05      ])
ge = np.array([ 0.        ,-0.00559735, 0.0298771 , 0.02220838,-0.01627355,-0.0124898 ,
  0.00152523, 0.00842682, 0.04408091, 0.07641367, 0.09364606, 0.10880692,
  0.11784296, 0.12499721, 0.12990633, 0.13553116, 0.14184318, 0.14256139,
  0.14348988, 0.14664605, 0.14904875, 0.15090887, 0.15298855, 0.15567201,
  0.15736971, 0.15858384, 0.15866287, 0.16228466, 0.15733982, 0.12808645])
thetae = ae + ge

#45deg
xt = np.array([   0.        ,   8.30768096,  23.45950949,  43.92384574,  67.86402518,
   94.07759689, 121.92366616, 151.12964056, 182.08993337, 215.38576032,
  251.44466529, 290.55143586, 332.78983347, 378.01792607, 425.88480019,
  475.91827713, 527.57221805, 580.17712615, 633.07496875, 685.62840785,
  737.24368106, 787.41808335, 835.76088591, 881.98230472, 925.91666624,
  967.38801652,1006.50833615,1043.46970119,1078.56514473,1112.06020808])
ht = np.array([ 0.00000000e+00,-8.89140235e-02, 4.02682930e-02, 1.56397651e+00,
  4.81423783e+00, 9.32269519e+00, 1.48116522e+01, 2.09324870e+01,
  2.57408079e+01, 2.80850908e+01, 2.81647362e+01, 2.69881214e+01,
  2.55775125e+01, 2.50106445e+01, 2.60497692e+01, 2.90952981e+01,
  3.45558601e+01, 4.29942410e+01, 5.44204358e+01, 6.87916815e+01,
  8.59688430e+01, 1.05660431e+02, 1.27472282e+02, 1.50956533e+02,
  1.75620939e+02, 2.01123177e+02, 2.26807917e+02, 2.52125931e+02,
  2.76570023e+02, 2.99804281e+02])
at = np.array([ 7.11864893e-01, 7.57744405e-01, 6.56359412e-01, 4.51986880e-01,
  3.58344166e-01, 2.50282451e-01, 1.59479846e-01, 3.44617103e-02,
  8.51599544e-03, 9.40531331e-03, 2.21881869e-02, 2.18336552e-02,
  2.15050156e-02, 1.45516222e-02, 6.24682719e-03, 1.17490401e-03,
  3.75427475e-03,-1.36960175e-03,-2.00742390e-03,-2.34768074e-03,
 -2.46027241e-03,-2.50261489e-03,-1.37595807e-03,-1.64933621e-03,
  4.60356285e-03, 2.22347088e-03, 4.67476221e-03, 3.53386947e-03,
  1.25619180e-02,-1.26130663e-04])
gt = np.array([ 0.        ,-0.01118108, 0.03613984, 0.10776416, 0.15583009, 0.18260346,
  0.20624282, 0.19230122, 0.11299672, 0.03153953,-0.01950894,-0.03613393,
 -0.02636825, 0.00310414, 0.04052153, 0.08146237, 0.13123707, 0.18602734,
  0.23964386, 0.29422954, 0.34807266, 0.39948607, 0.44788832, 0.4912837 ,
  0.53248325, 0.56806326, 0.59276153, 0.6059522 , 0.6104986 , 0.59644326])
thetat = at + gt



# interpolate data
n = 500
num = 30
dte = 1.55553774
dtt = 0.92526766
# linear time vector and interpolated time vector
tvece = np.linspace(0,num*dte,num)
tvect = np.linspace(0,num*dtt,num)
tie = np.linspace(tvece.min(), tvece.max(), n)
tit = np.linspace(tvect.min(), tvect.max(), int(n*dtt/dte))
# data splines
xse = make_interp_spline(tvece,xe)
hse = make_interp_spline(tvece,he)
tse = make_interp_spline(tvece,thetae)
xst = make_interp_spline(tvect,xt)
hst = make_interp_spline(tvect,ht)
tst = make_interp_spline(tvect,thetat)
# interpolated data splines
pad = np.ones(len(tie)-len(tit))
xie = xse(tie)
hie = hse(tie)
tie = tse(tie)
xit = np.concatenate((xst(tit), pad*xt[-1]))
hit = np.concatenate((hst(tit), pad*ht[-1]))
tit = np.concatenate((tst(tit), pad*thetat[-1]))


#endregion

m1 = Mesh('lpc.stl').scale(20).rotate_z(180)
m1.c('indianred').lighting('glossy').phong()
m2 = m1.clone()
m2.c('darkred').lighting('glossy').phong()

m1.pos(0, 0, 0).add_trail(n=2000,lw=4,offset=(-50,0,50),c='indianred')
m2.pos(0, 0, 0).add_trail(n=2000,lw=4,offset=(-50,0,50),c='darkred')

# Setup the scene
cam = dict(
    position=(1500, -8500, 0),
    focal_point=(1500, 0, 0),
    viewup=(0, 0, 1),
    distance=0,
)
plt = Plotter(axes=0, interactive=False)


video = Video('lpc_pitch_time.mp4', duration=None, fps=50, backend="cv")


index = 0
tref_e,tref_t = 0,0
for t in np.arange(0, n, 1):
    m1.rotate_y(-1*np.rad2deg(tie[index] - tref_e))
    m2.rotate_y(-1*np.rad2deg(tit[index] - tref_t))
    tref_e = tie[index]
    tref_t = tit[index]
    m1.pos(xie[index], 0, 1.5*hie[index])
    m2.pos(xit[index], 0, 1.5*hit[index])
    index += 1

    plt.show(m1,m2, __doc__, axes=0, viewup="z",camera=cam,rate=2000,bg=[240,248,255])
    video.add_frame()

#video.action(cameras=cam)
video.close() 
plt.interactive().close()