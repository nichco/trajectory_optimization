import numpy as np


# aircraft and mission parameter definitions
options = {} # aircraft and mission parameter dictionary

# aircraft data
options['mass'] = 3000 # 2000 # (kg)
options['wing_area'] = 19.6 # (m^2)
options['max_cruise_power'] = 468300 # (w)
options['max_lift_power'] = 143652 # 103652 (w)
options['cruise_rotor_diameter'] = 2.6 # (m)
options['lift_rotor_diameter'] = 2.4 # (m)
options['num_lift_rotors'] = 8
options['num_cruise_blades'] = 3
options['num_lift_blades'] = 2
options['cruise_mac'] = 0.15 # (m)
options['lift_mac'] = 0.15 # (m)
options['c_sigma'] = 0.19
options['l_sigma'] = 0.095
options['energy_scale'] = 0.0001 # scale energy for plotting

# mission parameters
options['gravity'] = 9.81 # (m/s^2)
options['v_0'] = 0.625 # (m/s)
options['gamma_0'] = 0.0 # (rad)
options['h_0'] = 0 # (m)
options['min_h'] = -0.1 # (m)
options['x_0'] = 0 # (m)
options['alpha_0'] = 0 # (rad)
options['h_f'] = 110 # (m)
options['v_f'] = 58 # (m/s)
options['vne'] = 65 # (m/s)
options['x_lim'] = 5000 # (m)
options['theta_0'] = 0.0 # (rad)
options['gamma_f'] = 0.0 # (rad)
options['max_g'] = 0.5 # (g)

# obstacle
options['be'] = 10 # (m) start of sinusoidal ramp
options['p_i'] = 100 # (m) start of obstacle
options['p_f'] = 12000 # (m) end of obstacle
options['obs_height'] = 100 # (m)


"""
print(np.array2string(sim['control_x'],separator=','))
print(np.array2string(sim['control_z'],separator=','))
print(np.array2string(sim['control_alpha'],separator=','))
"""


# min e seed TRANS!
options['dt'] = 4.10321105
options['control_x_i'] = np.array([1478.46379833,1470.02037267,1561.94847762,1590.6489358 ,1621.71172334,
 1243.35974109,1099.69694331,1031.27870549, 991.1806726 , 944.42023216,
  903.26768447, 881.4370414 , 844.73817016, 833.40374921, 809.44932288,
  793.24405787, 781.77511719, 768.46966513, 749.36256201, 733.13764883,
  723.47419142, 721.72140372, 696.89494668, 695.25713863, 681.97203952,
  664.99301556, 652.68484875, 653.23815621, 643.21559017, 629.97292629,
  616.53027834, 606.37350894, 595.06070562, 593.2460838 , 589.81310451,
  582.94813928, 568.60885032, 545.45258004, 532.49469643, 516.22322739,
  497.67036797, 482.75436735, 470.60134145, 456.86876721, 459.19444579,
  360.32351102, 654.2108247 ])
options['control_z_i'] = np.array([1.13820857e+03,1.09435148e+03,1.12697438e+03,8.35014374e+02,
 3.52746023e+02,8.96552542e+01,0.00000000e+00,6.02262278e-02,
 1.83121275e-15,1.08536404e-05,8.73901903e-05,1.49904625e-05,
 2.69059073e-04,2.15494203e-04,1.47925450e-04,5.68361051e-05,
 9.82455208e-05,2.53778031e-04,2.45312423e-04,2.31868048e-04,
 2.53059849e-04,1.36319391e-04,1.64070883e-05,5.22428381e-05,
 2.11610430e-04,2.49873036e-04,2.53232551e-04,1.56195383e-04,
 7.65107664e-05,5.98168345e-05,1.31277449e-04,1.95866186e-04,
 1.83690499e-04,1.87411707e-04,1.88697128e-04,2.00048217e-04,
 2.39352135e-04,2.13281934e-04,1.64528629e-04,1.47696175e-04,
 1.66148145e-04,1.67669870e-04,1.54944974e-04,1.63013147e-04,
 1.03522948e-04,1.78021373e-04,3.50947822e-05])
options['control_alpha_i'] = np.array([ 0.1827107 ,-1.57079633,-0.10566536, 0.095031  , 0.18192665, 0.11129706,
  0.08917585, 0.07208382, 0.0591251 , 0.05116414, 0.04129842, 0.03775774,
  0.0310528 , 0.02792097, 0.02365496, 0.02093741, 0.01819767, 0.01593144,
  0.01346824, 0.01289533, 0.01031189, 0.00935141, 0.00868521, 0.00713751,
  0.00723902, 0.0055953 , 0.00559518, 0.00588481, 0.00474047, 0.00544703,
  0.00458403, 0.00592391, 0.00493236, 0.00724121, 0.00531469, 0.00825768,
  0.00680948, 0.00972324, 0.00893118, 0.01159534, 0.01298021, 0.01403884,
  0.01783882, 0.01576063, 0.03268677, 0.02229917, 0.03420006])
