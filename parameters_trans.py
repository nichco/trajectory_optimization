import numpy as np


# aircraft and mission parameter definitions
options = {} # aircraft and mission parameter dictionary

# aircraft data
options['mass'] = 3000 # 2000 # (kg)
options['wing_area'] = 19.6 # (m^2)
options['max_cruise_power'] = 468300 # (w)
options['max_lift_power'] = 143652 # 103652 (w)
options['cruise_rotor_diameter'] = 2.6 # (m)
options['lift_rotor_diameter'] = 2.4 # (m)
options['num_lift_rotors'] = 8
options['num_cruise_blades'] = 3
options['num_lift_blades'] = 2
options['cruise_mac'] = 0.15 # (m)
options['lift_mac'] = 0.15 # (m)
options['c_sigma'] = 0.19
options['l_sigma'] = 0.095
options['energy_scale'] = 0.0001 # scale energy for plotting

# mission parameters
options['gravity'] = 9.81 # (m/s^2)
options['v_0'] = 0.625 # (m/s)
options['gamma_0'] = 0.0 # (rad)
options['h_0'] = 0 # (m)
options['min_h'] = -0.1 # (m)
options['x_0'] = 0 # (m)
options['alpha_0'] = 0 # (rad)
options['h_f'] = 200 # (m)
options['v_f'] = 58 # (m/s)
options['vne'] = 65 # (m/s)
options['x_lim'] = 5000 # (m)
options['theta_0'] = 0.0 # (rad)
options['gamma_f'] = 0.0 # (rad)
options['max_g'] = 0.5 # (g)

# obstacle
options['be'] = 10 # (m) start of sinusoidal ramp
options['p_i'] = 50 # (m) start of obstacle
options['p_f'] = 12000 # (m) end of obstacle
options['obs_height'] = 100 # (m)


"""
print(np.array2string(sim['control_x'],separator=','))
print(np.array2string(sim['control_z'],separator=','))
print(np.array2string(sim['control_alpha'],separator=','))
"""


# min e seed TRANS!
options['dt'] = 4.06798908
options['control_x_i'] = np.array([1478.46790257,1469.97016777,1560.40601469,1590.10008794,1621.20604368,
 1236.63641725,1135.11661215,1070.8421736 ,1013.83513572, 985.1083632 ,
  952.01297039, 913.08608327, 885.83330245, 874.65781558, 848.60875307,
  843.1947004 , 824.95900689, 818.46206938, 801.4777018 , 789.54520311,
  781.70490284, 775.4557338 , 773.70930646, 767.964119  , 764.73242874,
  762.25600376, 759.3436608 , 757.7803702 , 757.30142978, 757.25912987,
  757.44796535, 758.16373638, 759.14960968, 759.98026002, 760.59279136,
  761.21782217, 761.7823595 , 762.0832953 , 762.39310591, 762.80051968,
  763.90805904, 763.31299362, 769.50291165, 771.09750531, 763.56559758,
  695.44137637, 662.25293981])
options['control_z_i'] = np.array([1.13819106e+03,1.09414140e+03,1.12675120e+03,8.75043802e+02,
 3.59789155e+02,1.27426705e+02,4.19031907e-01,4.46930711e-02,
 3.80575535e-02,8.02440868e-03,6.80513505e-04,2.28984937e-05,
 3.28626555e-04,2.67313926e-04,2.72594302e-04,3.41899235e-04,
 2.21345512e-04,3.24159514e-04,3.03412851e-04,2.72545620e-04,
 3.21244579e-04,3.05799097e-04,3.11471753e-04,3.22880057e-04,
 3.23738720e-04,3.32816636e-04,3.33046894e-04,3.33443322e-04,
 3.30882361e-04,3.31751851e-04,3.32314053e-04,3.33850477e-04,
 3.33523228e-04,3.33521294e-04,3.33616233e-04,3.32043973e-04,
 3.34786184e-04,3.30246846e-04,3.42793020e-04,3.32620807e-04,
 3.52786154e-04,3.47148651e-04,3.08030176e-04,3.13999619e-04,
 2.22263186e-04,3.14268207e-04,5.23288889e-05])
options['control_alpha_i'] = np.array([ 1.70683494e-01,-1.57079633e+00,-1.15064357e-01, 7.24735152e-02,
  1.84423153e-01, 1.12225503e-01, 9.00453740e-02, 7.10414065e-02,
  5.63424349e-02, 5.05940986e-02, 3.38074180e-02, 3.52246389e-02,
  2.48903992e-02, 2.07086001e-02, 1.86208671e-02, 1.11112239e-02,
  1.28280591e-02, 4.67480540e-03, 7.37234605e-03,-4.00165147e-04,
  1.03299565e-02,-8.74636725e-03,-1.60273326e-03, 6.61936120e-04,
 -8.28525322e-03,-6.39418390e-03,-9.16380307e-03,-6.74747542e-03,
 -1.05507090e-02,-1.03035384e-02,-9.89370547e-03,-1.01585196e-02,
 -1.03388704e-02,-1.06075806e-02,-1.08620391e-02,-1.09088916e-02,
 -1.06507310e-02,-1.06179505e-02,-1.14971260e-02,-1.23392431e-02,
 -1.29174663e-02,-1.14459713e-02,-4.81585586e-03, 1.40606659e-03,
  2.40927587e-02,-1.06714656e-02, 3.59194194e-02])
