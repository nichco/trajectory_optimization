import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import make_interp_spline
plt.rcParams["font.family"] = "Times New Roman"
plt.rcParams.update({'font.size': 12})
"""
print(np.array2string(sim['x'],separator=','))
print(np.array2string(sim['h'],separator=','))
print(np.array2string(sim['v'],separator=','))
print(np.array2string(sim['max_spl_gl'],separator=','))


print(np.array2string(sim['control_x'],separator=','))
print(np.array2string(sim['control_z'],separator=','))
print(np.array2string(sim['control_alpha'],separator=','))
"""
num = 30


#region minenom
# min e nom
dten = 2.66245201
een = 12647649.77219404
ten = np.linspace(0,num*dten,num)
xen = np.array([   0.        ,  40.67036172, 112.11577654, 199.61122378, 296.05812808,
  399.50570306, 509.57992249, 626.19494   , 749.54628687, 878.9755276 ,
 1011.804107  ,1144.97142233,1276.8793721 ,1407.42794057,1537.28362987,
 1667.1695525 ,1797.50723869,1928.29216995,2059.20239389,2189.85828097,
 2320.09382987,2450.17544144,2580.8490989 ,2713.03724519,2847.16333708,
 2982.28783538,3115.47155009,3242.6225933 ,3361.59970126,3475.91855105])
hen = np.array([ 0.00000000e+00,-6.28525524e-02, 2.75165914e-02,-1.87058392e-02,
  3.96533860e-02, 7.09659802e-02, 1.07459849e-01, 1.07946240e-01,
  1.51303738e-01, 3.44172530e+00, 1.29502808e+01, 2.75119482e+01,
  4.40608705e+01, 6.00352028e+01, 7.43821973e+01, 8.73923705e+01,
  9.98688057e+01, 1.12654030e+02, 1.26178762e+02, 1.40317573e+02,
  1.54473357e+02, 1.67740415e+02, 1.79409801e+02, 1.89708045e+02,
  2.00316915e+02, 2.14229956e+02, 2.34294203e+02, 2.60112774e+02,
  2.85652365e+02, 2.99991684e+02])
ven = np.array([ 5.        ,22.68382994,30.43496736,34.81487619,37.57102248,40.10932407,
 42.56806139,45.0479003 ,47.57870601,49.52769274,50.33241086,50.19389992,
 49.65258923,49.18354313,49.00463198,49.08311055,49.27566711,49.41837236,
 49.41861933,49.28714277,49.13066328,49.13512296,49.47775695,50.15837578,
 50.8730185 ,51.023168  ,49.92446614,47.33799953,44.18369662,42.99981117])
splen = np.array([103.33626292, 99.57464541, 96.18920581, 92.79270769, 91.79528984,
  91.51774483, 91.38507575, 91.46167072, 91.66688026, 91.31348434,
  88.72972147, 86.45385192, 84.97939193, 83.97732524, 83.25380432,
  82.74409157, 82.3400475 , 81.9867508 , 81.64168728, 81.29821597,
  80.96012959, 80.66708707, 80.47289452, 80.38476625, 80.36610701,
  80.30668832, 80.01373974, 79.34423079, 78.32613725, 77.44835434])
#endregion


#region mine85seg
# min e 85db
dte85 = 2.70211729
ee85 = 12655978.411256
te85 = np.linspace(0,num*dte85,num)
xe85 = np.array([   0.        ,  41.28829753, 113.98086589, 202.8949089 , 301.23329998,
  407.26277046, 520.70752883, 641.57124904, 769.29448503, 900.2673784 ,
 1030.24851616,1158.94810004,1288.94836148,1420.77441912,1553.69948024,
 1686.67493463,1819.18288253,1951.33697042,2083.40788585,2215.41457196,
 2347.22362299,2478.95354897,2611.24188396,2745.03474016,2880.82530869,
 3017.68104976,3152.61919446,3281.4168358 ,3401.90468047,3517.82008705])
he85 = np.array([ 0.00000000e+00,-5.96018069e-02, 1.00634870e-02,-2.16903164e-02,
  5.01280173e-02, 1.35638582e-01, 7.04168982e-02, 8.88015066e-02,
  2.71951708e+00, 1.38608072e+01, 2.92296500e+01, 4.07242455e+01,
  5.05416406e+01, 6.07455542e+01, 7.27444401e+01, 8.65045995e+01,
  1.00829088e+02, 1.14736609e+02, 1.28218891e+02, 1.41784450e+02,
  1.55480185e+02, 1.68610825e+02, 1.80321043e+02, 1.90596805e+02,
  2.01091923e+02, 2.14910430e+02, 2.34903271e+02, 2.60738683e+02,
  2.86162662e+02, 2.99983109e+02])
ve85 = np.array([ 5.        ,22.74783141,30.48110533,34.89148399,37.84138504,40.61254189,
 43.35569833,46.08382835,48.27394014,48.78475901,47.98672619,47.90707497,
 48.59860931,49.22596515,49.49486472,49.41784118,49.23505612,49.1392501 ,
 49.12568889,49.08516087,49.00124673,49.01768706,49.34150051,50.0194844 ,
 50.75071233,50.91492762,49.81928855,47.20851687,44.06241406,42.99964934])
sple85 = np.array([103.28116847, 99.55920832, 96.09444564, 92.88120565, 92.01633539,
  91.77348466, 91.67793123, 91.75464962, 91.53959116, 88.57516339,
  85.00271225, 84.99712661, 84.34732839, 83.81185376, 83.26556917,
  82.74853968, 82.27268149, 81.86657541, 81.51428861, 81.192562  ,
  80.87511801, 80.59280399, 80.40345899, 80.3153434 , 80.30171789,
  80.24601959, 79.94435308, 79.27309725, 78.26931889, 77.40905041])
#endregion


#region mine80seg
# min e 80db
dte80 = 2.93246553
ee80 = 12855161.40780663
te80 = np.linspace(0,num*dte80,num)
xe80 = np.array([   0.        ,  45.25475341, 125.50896397, 223.51256404, 333.01707634,
  453.11013804, 584.58783121, 728.81806305, 881.50684019,1030.66305872,
 1167.1890865 ,1291.5099992 ,1413.08920191,1539.02162494,1670.33411402,
 1804.73077147,1940.32914679,2076.48215675,2213.42657129,2351.54604846,
 2490.91708664,2631.40998438,2773.10697211,2916.56022505,3062.35924183,
 3210.00473425,3356.71384328,3497.52425683,3628.84134932,3754.63972461])
he80 = np.array([ 0.00000000e+00,-4.96791005e-02,-3.24427646e-02,-1.19154322e-02,
  3.28245888e-02, 8.84331991e-01, 3.11631541e-01, 2.52586540e-01,
  1.44522468e+01, 4.76127199e+01, 8.80603112e+01, 1.11937994e+02,
  1.17950584e+02, 1.16808727e+02, 1.17520624e+02, 1.22056330e+02,
  1.29087053e+02, 1.37045602e+02, 1.44979117e+02, 1.53079274e+02,
  1.61890410e+02, 1.71593308e+02, 1.81658008e+02, 1.91384952e+02,
  2.01190330e+02, 2.13577624e+02, 2.32271076e+02, 2.58472994e+02,
  2.85648499e+02, 2.99998343e+02])
ve80 = np.array([ 5.        ,23.20860263,30.9220507 ,35.55028228,39.13692051,42.79855241,
 46.96941748,51.23077341,52.81722478,51.03843818,45.61191363,41.58908976,
 41.94793959,43.95861022,45.46096124,46.1555852 ,46.41695135,46.61671698,
 46.96212145,47.40425257,47.83047939,48.21845815,48.69551127,49.40603078,
 50.24284224,50.68415911,49.9510178 ,47.46959157,44.09948062,43.00028496])
sple80 = np.array([103.07537874, 99.33736365, 95.7584822 , 92.89163901, 92.64816852,
  92.70939657, 92.84969593, 93.26005843, 89.75180647, 86.73583732,
  79.99943373, 79.99908726, 79.99956429, 79.99984301, 79.99957664,
  79.99973238, 79.99943185, 79.99952883, 80.00011235, 80.00033324,
  80.00081333, 80.0012636 , 80.00132862, 80.00109304, 80.00072682,
  80.00007465, 79.90596705, 79.2688693 , 78.15665319, 77.26709047])
#endregion


#region mine75seg
# min e 75db
dte75 = 3.40197917
ee75 = 13969871.65028873
te75 = np.linspace(0,num*dte75,num)
xe75 = np.array([   0.        ,  52.39616087, 149.02171827, 269.43366228, 412.78190164,
  579.47139559, 763.04166483, 951.18406596,1136.47304878,1311.72351678,
 1467.09263578,1603.31336811,1735.65747318,1875.36783352,2022.17436634,
 2170.83150355,2318.43383215,2465.10370996,2612.00948588,2759.62828167,
 2907.71481877,3056.11129068,3204.52846407,3353.25753352,3502.95311893,
 3654.2302425 ,3806.33580373,3955.268303  ,4096.20193612,4236.56366519])
he75 = np.array([ 0.00000000e+00,-7.01834434e-02,-3.03649766e-02, 4.34872260e-01,
  3.57805980e-02, 6.06581449e-01, 1.82794119e+01, 5.20793689e+01,
  9.68559000e+01, 1.52679827e+02, 2.12723575e+02, 2.40877331e+02,
  2.40943314e+02, 2.33382529e+02, 2.30860450e+02, 2.34305508e+02,
  2.39556555e+02, 2.43791067e+02, 2.46732252e+02, 2.49734244e+02,
  2.53216248e+02, 2.56968009e+02, 2.61169891e+02, 2.64680074e+02,
  2.67480646e+02, 2.69832714e+02, 2.74693575e+02, 2.86141030e+02,
  3.00536617e+02, 3.00004171e+02])
ve75 = np.array([ 5.        ,23.97441515,32.10503486,38.72310557,45.55170161,52.19894612,
 55.68065162,56.43275683,55.32392554,52.61540147,44.4929606 ,38.70825007,
 39.74206826,42.38812482,43.67832446,43.62522705,43.22370742,43.10248817,
 43.2974567 ,43.48760385,43.59256499,43.65635168,43.65122355,43.83975248,
 44.21681744,44.69984691,44.58851019,42.93949398,40.69733878,42.99954203])
sple75 = np.array([102.75145465, 98.81372944, 95.55934525, 94.56713272, 94.15125889,
  94.40487112, 89.84358882, 87.09568111, 85.2055472 , 84.62158847,
  76.00026921, 75.99853186, 75.99960053, 76.00106431, 75.99916963,
  75.99904816, 75.99985766, 76.00005419, 75.99997291, 75.99957491,
  75.9991121 , 76.00028786, 75.99991666, 76.00000539, 75.99883441,
  75.99904693, 75.99905839, 76.00019465, 76.00096796, 76.16011499])
#endregion



#region mintnom
# min t nom
dttn = 0.92450286
etn = 15531639.33530839
ttn = np.linspace(0,num*dttn,num)
xtn = np.array([   0.        ,   8.23580089,  23.47055501,  44.38638487,  69.41619298,
   97.33860186, 127.28247944, 158.68106758, 191.69817324, 226.83827616,
  264.45627401, 304.74844785, 347.74383413, 393.29077701, 441.07591669,
  490.71167994, 541.7521186 , 593.61797684, 645.72689873, 697.50472778,
  748.39695341, 797.92527484, 845.71259261, 891.48734304, 935.09661552,
  976.38363818,1015.47094205,1052.5591669 ,1087.94291404,1121.88244314])
htn = np.array([ 0.00000000e+00, 6.93358566e-02,-1.00170667e-02,-7.61759172e-02,
  1.24386934e+00, 4.05388889e+00, 8.42957121e+00, 1.42938561e+01,
  1.96346978e+01, 2.30501155e+01, 2.45960026e+01, 2.51881573e+01,
  2.56900169e+01, 2.69926950e+01, 2.96840894e+01, 3.40421000e+01,
  4.04287599e+01, 4.94181687e+01, 6.10707142e+01, 7.54044332e+01,
  9.23418505e+01, 1.11642892e+02, 1.32949402e+02, 1.55836065e+02,
  1.79825649e+02, 2.04584092e+02, 2.29472070e+02, 2.53956198e+02,
  2.77547270e+02, 2.99927287e+02])
vtn = np.array([ 5.        ,12.82271641,19.90517245,25.06536617,28.92348045,31.65561838,
 33.72290662,35.33661809,37.09935993,39.38247541,42.12812579,45.05626783,
 47.93888267,50.58650379,52.89599406,54.83767256,56.37489468,57.43081151,
 58.01715342,58.144849  ,57.8307285 ,57.11139355,56.03232099,54.64250607,
 52.99664967,51.12232661,49.10759415,47.03108015,44.97490081,43.00402133])
spltn = np.array([101.87667103,102.21056089,102.07265058,100.46292652, 99.37854002,
  98.03199616, 96.58880886, 95.18044238, 93.72922598, 92.67400365,
  92.1910186 , 91.94515566, 91.91063947, 91.84047928, 91.51048578,
  91.05705144, 90.43062603, 89.61644002, 88.7799018 , 88.01858393,
  87.30328939, 86.67676379, 86.13038854, 85.65373936, 85.2521069 ,
  84.89597058, 84.60245531, 84.34130633, 84.10942531, 83.86027327])
#endregion


#region mint85seg
# min t 85db
dtt85 = 1.25914445
et85 = 15967173.90816795
tt85 = np.linspace(0,num*dtt85,num)
xt85 = np.array([   0.        ,  12.51585103,  36.65596601,  70.39721423, 111.67260002,
  155.97928509, 201.47896251, 247.15838928, 293.6866918 , 341.98585431,
  392.25205799, 443.69290475, 496.8888974 , 552.60138462, 611.29968495,
  673.17411019, 738.23244624, 806.22059519, 876.56630557, 948.48789314,
 1021.00590188,1093.10580231,1163.90209613,1232.72488674,1299.12942273,
 1362.64706011,1423.1611176 ,1480.45965642,1534.62965583,1585.81596956])
ht85 = np.array([ 0.00000000e+00, 6.91133180e-01, 2.05088866e+00,-8.58977519e-02,
  3.19600102e+00, 1.02215686e+01, 2.17101259e+01, 3.62565442e+01,
  5.04679484e+01, 6.25801510e+01, 7.21736296e+01, 7.82361978e+01,
  8.09630961e+01, 8.11314730e+01, 7.92977564e+01, 7.60094679e+01,
  7.23780999e+01, 7.01306435e+01, 7.03186202e+01, 7.39114018e+01,
  8.16134801e+01, 9.36918357e+01, 1.10032317e+02, 1.30251956e+02,
  1.53834179e+02, 1.80582732e+02, 2.09554930e+02, 2.39774126e+02,
  2.70167557e+02, 2.99930481e+02])
vt85 = np.array([ 5.        ,14.80787307,23.38812121,30.42994147,34.57510225,36.60656223,
 37.78735328,38.33350518,39.00724097,40.18912008,40.89821894,41.56804936,
 43.17787135,45.39523364,47.91348576,50.50132569,52.95350257,55.02844346,
 56.63026249,57.66323929,58.08913839,57.96418593,57.3987112 ,56.51120266,
 55.39480799,54.06513553,52.43225852,50.42367248,48.20644752,45.84325545])
splt85 = np.array([101.76349864,102.395689  ,102.1959511 ,101.66140971, 96.45301706,
  95.67497921, 93.81449859, 91.9211527 , 90.93992139, 90.37804152,
  85.00096596, 85.00261587, 85.00431177, 85.00562636, 85.00531398,
  85.00475206, 85.00359978, 85.00299421, 85.00316333, 85.00011762,
  84.99911876, 84.99874002, 84.9988018 , 84.99906352, 84.99925076,
  84.99944214, 84.5648323 , 84.24228427, 83.93489835, 83.51744008])
#endregion


#region mint80seg
# min t 80db
dtt80 = 2.21975485
et80 = 19404244.74709121
tt80 = np.linspace(0,num*dtt80,num)
xt80 = np.array([   0.        ,  28.2224619 ,  79.58067803, 143.86301315, 217.44976206,
  294.96074004, 370.51796654, 444.76813584, 523.42633928, 611.94225335,
  711.12013884, 814.84081984, 922.1410538 ,1032.28121803,1143.92718885,
 1256.58177159,1370.37234713,1485.02790565,1600.1643194 ,1715.62378091,
 1831.22407204,1946.76831383,2062.14196568,2177.32110265,2292.34470291,
 2406.76087363,2520.27135462,2632.80403687,2744.44361096,2856.00455425])
ht80 = np.array([  0.        ,  4.01418795, 17.77295391, 21.55811076, 32.80665755,
  53.3577609 , 83.17175314,112.48048184,133.45307504,144.02227432,
 147.92672152,147.89720036,147.14918931,148.80867328,152.56131342,
 156.33872253,159.74614144,164.34512043,169.79480341,176.09502945,
 183.42294999,191.78090673,201.0802761 ,211.2487514 ,222.38567429,
 235.7233368 ,250.38493262,265.93415051,282.04565333,299.91534536])
vt80 = np.array([ 5.        ,19.73482364,27.21337499,31.25589973,35.24047399,36.7338521 ,
 36.25978732,35.94027363,37.95093267,42.75310327,45.99269243,47.52740392,
 49.08902543,50.05720953,50.55624137,51.0199367 ,51.53176777,51.82550407,
 52.02033905,52.15194748,52.19842712,52.17110881,52.11632064,52.07256318,
 52.02277461,51.7387855 ,51.37599006,50.98896445,50.61038455,51.77833053])
splt80 = np.array([101.72711074,101.95518062, 98.47609484, 96.70401056, 91.67899657,
  90.43832159, 89.10967002, 88.01995321, 87.4276791 , 87.21502571,
  80.00457428, 80.00161024, 80.00056313, 79.99627698, 79.99201671,
  79.98985877, 79.98985938, 79.99164983, 79.99461434, 79.99789455,
  80.00066072, 80.00222458, 80.00241865, 80.00140503, 79.99947053,
  79.99712424, 79.99503353, 79.99364573, 79.99361096, 80.19856078])
#endregion


#region mint75seg
# min t 75db
dtt75 = 3.28730952
et75 = 22665116.273316
tt75 = np.linspace(0,num*dtt75,num)
xt75 = np.array([   0.        ,  47.71662839, 109.35839247, 181.51485921, 270.35677765,
  388.82402551, 526.97686993, 661.82808101, 790.58607393, 926.25340011,
 1073.43277786,1220.99579187,1373.91727592,1535.35950656,1702.14030073,
 1871.89461862,2044.35810484,2217.81728488,2390.09828536,2560.77560343,
 2730.50423901,2900.41772209,3071.5172892 ,3244.03597185,3417.2429512 ,
 3588.71212337,3756.70989996,3921.79174936,4085.98444124,4249.28810214])
ht75 = np.array([  0.        , 12.74218702, 58.35967843, 83.03390752, 94.93011744,
 101.67218366,131.61179604,185.28485417,238.78355143,275.28395828,
 294.98718348,297.17885558,287.09719504,277.80771944,273.35759847,
 269.75512358,266.81832639,268.26532069,271.8458112 ,275.08507129,
 276.48348356,275.67008476,273.67650022,272.39004901,273.64903356,
 279.87673565,287.39631124,293.10780462,296.02109309,299.74577869])
vt75 = np.array([ 5.        ,22.51317614,22.76065794,24.18418379,31.23805617,40.54361862,
 44.5466402 ,43.38378387,41.9052577 ,44.37805653,45.07080763,45.32450304,
 48.00796021,50.17562479,51.23472643,52.07645416,52.77129863,52.65919124,
 52.16570002,51.72888816,51.59636963,51.83003254,52.28204384,52.65144305,
 52.60457827,51.70259341,50.63679727,49.98706054,49.88983411,49.62015998])
splt75 = np.array([101.69254282,100.44791822, 95.3028392 , 92.24048659, 87.75508914,
  88.18187083, 87.61234376, 86.1196291 , 84.8444555 , 84.15157577,
  75.00384291, 75.00273017, 75.0000442 , 75.00095002, 75.01165659,
  75.00900745, 75.00364977, 75.00642163, 75.00786381, 75.0016074 ,
  74.99879643, 75.00537449, 75.00771207, 75.00349293, 75.00406113,
  75.00199169, 74.99958168, 74.99867907, 74.9999101 , 74.82414309])
#endregion



"""
# h vs x min e
plt.rcParams['figure.figsize'] = [11, 2.5]

eSplinen = make_interp_spline(xen,hen)
ixen = np.linspace(xen.min(), xen.max(), 500)
ihen = eSplinen(ixen)

eSpline85 = make_interp_spline(xe85,he85)
ixe85 = np.linspace(xe85.min(), xe85.max(), 500)
ihe85 = eSpline85(ixe85)

eSpline80 = make_interp_spline(xe80,he80)
ixe80 = np.linspace(xe80.min(), xe80.max(), 500)
ihe80 = eSpline80(ixe80)

eSpline75 = make_interp_spline(xe75,he75)
ixe75 = np.linspace(xe75.min(), xe75.max(), 500)
ihe75 = eSpline75(ixe75)

target_altitude = np.ones(num)*300
plt.plot(xe75,target_altitude,color='k',linestyle='dashed',linewidth=1)
plt.scatter(xen,hen,color='k',marker='^')
plt.scatter(xe85,he85,color='darkblue',marker='D')
plt.scatter(xe80,he80,color='blue',marker='s')
plt.scatter(xe75,he75,color='royalblue',marker='o')
plt.legend(['target altitude','minimum energy nominal','minimum energy 'r'SPL$\leq$85db', 'minimum energy 'r'SPL$\leq$80db', 'minimum energy 'r'SPL$\leq$75db'], frameon=False)

plt.plot(ixen,ihen,color='k',linestyle='solid',linewidth=2)
plt.plot(ixe85,ihe85,color='navy',linestyle='solid',linewidth=2)
plt.plot(ixe80,ihe80,color='blue',linestyle='solid',linewidth=2)
plt.plot(ixe75,ihe75,color='royalblue',linestyle='solid',linewidth=2)
plt.xlabel('horizontal displacement (m)')
plt.ylabel('altitude (m)')
# plt.legend(['nominal','85db', '80db', '75db'], frameon=False)
plt.savefig('e_spl_h_vs_x.png', dpi=1200, bbox_inches='tight')
plt.show()



# h vs x min t
plt.rcParams['figure.figsize'] = [11, 2.5]

tSplinen = make_interp_spline(xtn,htn)
ixtn = np.linspace(xtn.min(), xtn.max(), 500)
ihtn = tSplinen(ixtn)

tSpline85 = make_interp_spline(xt85,ht85)
ixt85 = np.linspace(xt85.min(), xt85.max(), 500)
iht85 = tSpline85(ixt85)

tSpline80 = make_interp_spline(xt80,ht80)
ixt80 = np.linspace(xt80.min(), xt80.max(), 500)
iht80 = tSpline80(ixt80)

tSpline75 = make_interp_spline(xt75,ht75)
ixt75 = np.linspace(xt75.min(), xt75.max(), 500)
iht75 = tSpline75(ixt75)

target_altitude = np.ones(num)*300
plt.plot(xt75,target_altitude,color='k',linestyle='dashed',linewidth=1)
plt.scatter(xtn,htn,color='k',marker='o')
plt.scatter(xt85,ht85,color='darkred',marker='d')
plt.scatter(xt80,ht80,color='red',marker='P')
plt.scatter(xt75,ht75,color='indianred',marker='v')
plt.legend(['target altitude','minimum time nominal','minimum time 'r'SPL$\leq$85db', 'minimum time 'r'SPL$\leq$80db', 'minimum time 'r'SPL$\leq$75db'], frameon=False)

plt.plot(ixtn,ihtn,color='k',linestyle='solid',linewidth=2)
plt.plot(ixt85,iht85,color='darkred',linestyle='solid',linewidth=2)
plt.plot(ixt80,iht80,color='red',linestyle='solid',linewidth=2)
plt.plot(ixt75,iht75,color='indianred',linestyle='solid',linewidth=2)
plt.xlabel('horizontal displacement (m)')
plt.ylabel('altitude (m)')
#plt.legend(['nominal','85db', '80db', '75db'], frameon=False)
plt.savefig('t_spl_h_vs_x.png', dpi=1200, bbox_inches='tight')
plt.show()
"""






# spl vs t min e
plt.rcParams['figure.figsize'] = [5, 2.5]

eSplinen = make_interp_spline(ten,splen)
iten = np.linspace(ten.min(), ten.max(), 500)
isplen = eSplinen(iten)

eSpline85 = make_interp_spline(te85,sple85)
ite85 = np.linspace(te85.min(), te85.max(), 500)
isple85 = eSpline85(ite85)

eSpline80 = make_interp_spline(te80,sple80)
ite80 = np.linspace(te80.min(), te80.max(), 500)
isple80 = eSpline80(ite80)

eSpline75 = make_interp_spline(te75,sple75)
ite75 = np.linspace(te75.min(), te75.max(), 500)
isple75 = eSpline75(ite75)

#target_altitude = np.ones(num)*300
#plt.plot(xe75,target_altitude,color='k',linestyle='dashed',linewidth=1)
plt.scatter(ten,splen,color='k',marker='o')
plt.scatter(te85,sple85,color='darkblue',marker='d')
plt.scatter(te80,sple80,color='blue',marker='P')
plt.scatter(te75,sple75,color='royalblue',marker='v')
plt.legend(['minimum time nominal','minimum time 'r'SPL$\leq$85db', 'minimum time 'r'SPL$\leq$80db', 'minimum time 'r'SPL$\leq$75db'], frameon=False)

plt.plot(iten,isplen,color='k',linestyle='solid',linewidth=2)
plt.plot(ite85,isple85,color='navy',linestyle='solid',linewidth=2)
plt.plot(ite80,isple80,color='blue',linestyle='solid',linewidth=2)
plt.plot(ite75,isple75,color='royalblue',linestyle='solid',linewidth=2)
plt.xlabel('time (s)')
plt.ylabel('sound pressure level (db)')
plt.savefig('t_spl_vs_t.png', dpi=1200, bbox_inches='tight')
plt.show()







# spl vs t min t
plt.rcParams['figure.figsize'] = [5, 2.5]

tSplinen = make_interp_spline(ttn,spltn)
ittn = np.linspace(ttn.min(), ttn.max(), 500)
ispltn = tSplinen(ittn)

tSpline85 = make_interp_spline(tt85,splt85)
itt85 = np.linspace(tt85.min(), tt85.max(), 500)
isplt85 = tSpline85(itt85)

tSpline80 = make_interp_spline(tt80,splt80)
itt80 = np.linspace(tt80.min(), tt80.max(), 500)
isplt80 = tSpline80(itt80)

tSpline75 = make_interp_spline(tt75,splt75)
itt75 = np.linspace(tt75.min(), tt75.max(), 500)
isplt75 = tSpline75(itt75)

#target_altitude = np.ones(num)*300
#plt.plot(xe75,target_altitude,color='k',linestyle='dashed',linewidth=1)
plt.scatter(ttn,spltn,color='k',marker='^')
plt.scatter(tt85,splt85,color='darkred',marker='D')
plt.scatter(tt80,splt80,color='red',marker='s')
plt.scatter(tt75,splt75,color='indianred',marker='o')
plt.legend(['minimum energy nominal','minimum energy 'r'SPL$\leq$85db', 'minimum energy 'r'SPL$\leq$80db', 'minimum energy 'r'SPL$\leq$75db'], frameon=False)

plt.plot(ittn,ispltn,color='k',linestyle='solid',linewidth=2)
plt.plot(itt85,isplt85,color='darkred',linestyle='solid',linewidth=2)
plt.plot(itt80,isplt80,color='red',linestyle='solid',linewidth=2)
plt.plot(itt75,isplt75,color='indianred',linestyle='solid',linewidth=2)
plt.xlabel('time (s)')
plt.ylabel('sound pressure level (db)')
plt.savefig('e_spl_vs_t.png', dpi=1200, bbox_inches='tight')
plt.show()






