from smt.surrogate_models import RBF
import numpy as np


n = 3500
x_lim = 12000.0 # (m)
be = 20
pi = 150
pf = 12000
o = 100
x = np.linspace(0,x_lim,n)
obs = np.zeros((n))

for i in range(0,n):
    xi = x[i]
    if xi > pi and xi <= pf:
        obs[i] = o
    elif xi > be and xi < pi:
        l = (pi-be)
        obs[i] = (np.sin((np.pi/(pi-be))*(xi-be)-(np.pi/2)) + 1)*(o/2)

sm = RBF(d0=50,print_global=False,print_solver=False,)
sm.set_training_values(x, obs)
sm.train()

num = 47
dte = 4.05948281
te = np.linspace(0,num*dte,num)

he = np.array([  0.        , 40.75942276, 86.64545201, 99.90821269,100.07849452,
  99.97853883,100.133863  ,100.10642108,100.14712055,100.14872195,
 100.19646167,100.29718556,100.28290874,100.28163395,100.14251382,
 100.26808897,101.82904935,101.16506337,101.0358852 ,100.91322628,
 100.57087478,101.33867346,100.65623737,101.19898517,103.52730011,
 108.02071614,113.15284269,119.15948866,126.20173722,132.64934644,
 137.42429595,141.10665177,145.34806269,151.02096796,157.19050952,
 162.46978419,166.78315806,171.3173099 ,176.35710106,180.30173119,
 182.39236712,184.45327123,192.12721393,212.24664972,248.16722261,
 285.59038465,300.04057845])
xe = np.array([    0.        ,   45.57074785,   95.45368232,  149.22005208,
   290.57478932,  461.31528678,  649.90836879,  851.51286897,
  1063.60616048, 1284.54617558, 1513.31594963, 1748.94874935,
  1990.65366513, 2237.9596114 , 2490.51223801, 2747.91421289,
  3009.09006741, 3274.28360888, 3543.68762214, 3816.74130951,
  4093.48971562, 4373.2632966 , 4656.2518495 , 4942.35152789,
  5230.4899849 , 5519.40659055, 5808.39049772, 6097.07787498,
  6384.85440575, 6671.69920836, 6958.40392916, 7245.78156915,
  7533.88394014, 7822.01852849, 8109.65174236, 8397.03253346,
  8684.77356886, 8973.02148886, 9261.45672126, 9550.31795395,
  9840.54310028,10132.67348632,10424.94155158,10711.39132367,
 10982.60723857,11228.48127697,11464.61769462])
ve = np.array([ 0.625     ,20.82928664,23.6809557 ,30.76700581,38.97816783,44.55898057,
 48.19590289,51.03525809,53.38809972,55.42879537,57.24003786,58.81683098,
 60.24722576,61.58205912,62.82995322,63.93008601,64.77430451,65.88230817,
 66.81929235,67.71879764,68.58668877,69.27414019,70.13828528,70.77324546,
 71.13586099,71.19935602,71.18581343,71.04518152,70.77635733,70.61503199,
 70.69170728,70.90426057,71.02035021,70.94076079,70.81328381,70.82344204,
 70.95992831,71.0520591 ,71.08426929,71.28518983,71.73320287,72.13278978,
 71.68911229,69.49156749,64.77734683,58.94219166,57.99955274])
gamma = np.array([ 0.00000000e+00, 1.24656253e+00, 2.19347242e-01, 4.58457237e-02,
 -2.02947608e-02, 6.73879168e-03,-1.48132953e-03, 3.32160743e-04,
  4.21810083e-05,-1.29081863e-05, 3.98956887e-04, 1.91470527e-04,
 -9.25430312e-05,-6.14264770e-05,-1.35367284e-03, 4.76539875e-03,
  2.18568359e-03,-3.04305898e-03, 6.17817085e-04,-1.92451384e-03,
  1.62363762e-03, 2.67984238e-04,-1.76351947e-03, 4.82111356e-03,
  1.22195746e-02, 1.72525678e-02, 1.87757278e-02, 2.31526154e-02,
  2.45571432e-02, 1.97559565e-02, 1.39152002e-02, 1.27925770e-02,
  1.72283180e-02, 2.14792839e-02, 2.04853727e-02, 1.62070212e-02,
  1.46550020e-02, 1.71330008e-02, 1.65722573e-02, 1.02713302e-02,
  4.94079246e-03, 1.20874548e-02, 4.51435129e-02, 9.53681995e-02,
  1.76871946e-01, 1.13913166e-01,-2.43731826e-05])
control_x = np.array([1478.46839177,1469.88371172,1561.30193842,1590.6517131 ,1621.02725978,
 1258.00635731,1136.14748068,1069.42239768,1012.62285566, 983.78951168,
  951.22861856, 918.07893348, 902.02278023, 891.31667097, 867.77763391,
  868.57036563, 847.29577691, 842.83376122, 830.96112606, 825.9796067 ,
  820.83511672, 816.25525442, 814.94215875, 811.47833568, 810.09559839,
  809.72238888, 810.42534428, 811.21304233, 812.09912366, 812.79303528,
  813.62782248, 814.51022796, 815.23106405, 815.80475138, 816.58646707,
  817.62711267, 818.53716115, 818.91296902, 819.30955833, 819.66902176,
  820.75434756, 819.74803248, 826.98838551, 830.72992529, 823.80509854,
  750.97519027, 665.06727011])
control_z = np.array([1.13818888e+03,1.09422547e+03,1.12652998e+03,8.92621611e+02,
 3.37422206e+02,6.49171589e+01,1.20335936e-14,3.52522818e-02,
 5.17012824e-02,1.10644975e-02,5.57893602e-04,8.81099543e-05,
 3.49938024e-04,2.78368562e-04,2.66875333e-04,3.53108037e-04,
 2.23079466e-04,3.34797144e-04,3.00553857e-04,2.74932631e-04,
 3.31353169e-04,3.25468045e-04,3.25589043e-04,3.35547256e-04,
 3.41446722e-04,3.44010914e-04,3.48076410e-04,3.51170734e-04,
 3.51005211e-04,3.50833691e-04,3.50781244e-04,3.52671278e-04,
 3.52560491e-04,3.52339689e-04,3.52050152e-04,3.50385570e-04,
 3.53707240e-04,3.48914421e-04,3.61919944e-04,3.50901201e-04,
 3.74057325e-04,3.68301192e-04,3.25907660e-04,3.34079419e-04,
 2.39506953e-04,3.33523160e-04,5.65272230e-05])
control_alpha = np.array([ 1.69192075e-01,-1.57079633e+00,-1.05241623e-01, 5.61499156e-02,
  1.93740981e-01, 1.11155226e-01, 8.81666989e-02, 6.88369811e-02,
  5.58035669e-02, 4.55632870e-02, 3.72141792e-02, 3.01760063e-02,
  2.46608480e-02, 1.94122134e-02, 1.45622733e-02, 1.35338040e-02,
  5.26571915e-03, 6.21023668e-03, 1.82630652e-03,-1.25958062e-03,
 -1.41789290e-03,-7.01514745e-03,-5.91688260e-03,-8.25085717e-03,
 -8.22605453e-03,-9.95720380e-03,-9.35977947e-03,-8.61935302e-03,
 -9.10453188e-03,-9.29488703e-03,-9.10336869e-03,-8.52415871e-03,
 -8.17966508e-03,-8.58292686e-03,-9.14590698e-03,-9.18702958e-03,
 -8.60954917e-03,-8.45990546e-03,-9.74782551e-03,-1.07150042e-02,
 -1.10234640e-02,-9.03643285e-03,-3.10362739e-03, 2.94956754e-03,
  2.58116793e-02,-9.57654706e-03, 3.65392539e-02])
cruise_power = np.array([468300.0000265 ,468224.73448179,468283.99980465,468304.97270161,
 408059.30140647,207368.57906714,147694.70617487,119867.14138031,
  99462.09956231, 89382.50480909, 79339.85975288, 70191.34108379,
  65596.33182573, 62409.88666875, 56838.74383094, 56329.19304013,
  51803.69050259, 50381.97505911, 47786.2871865 , 46465.0043834 ,
  45160.86195827, 44062.75014236, 43420.9951547 , 42555.51431221,
  42150.85347284, 42044.62532769, 42139.57140242, 42306.78996111,
  42549.80186235, 42712.37951436, 42786.27500366, 42804.33214032,
  42842.46480177, 42949.51976294, 43111.68172862, 43249.63945253,
  43307.05735995, 43301.26669891, 43327.9087302 , 43267.91124692,
  43204.55555906, 42833.81720604, 44172.90067431, 45839.38531183,
  46968.07566908, 37651.38078167, 26397.19552179])
lift_power = np.array([1.43651999e+05,1.43651492e+05,1.36431241e+05,9.85662802e+04,
 2.76083457e+04,2.77297109e+01,1.79692652e-46,4.58561241e-09,
 1.46430185e-08,1.45065662e-10,1.87750650e-14,7.45909294e-17,
 4.70855623e-15,2.38742840e-15,2.11832816e-15,4.93190053e-15,
 1.25132853e-15,4.25005492e-15,3.09230340e-15,2.37917563e-15,
 4.18221967e-15,3.98303171e-15,4.00261499e-15,4.39760518e-15,
 4.64062261e-15,4.74804454e-15,4.91466789e-15,5.03937050e-15,
 5.02317493e-15,5.00915499e-15,5.00612477e-15,5.08987911e-15,
 5.08525590e-15,5.07167324e-15,5.05402496e-15,4.98044784e-15,
 5.12368466e-15,4.91799044e-15,5.48918223e-15,5.00743710e-15,
 6.07810148e-15,5.80805324e-15,4.00501535e-15,4.25234074e-15,
 1.51691594e-15,4.02221212e-15,1.92191075e-17])
e = np.array([       0.        , 6876130.81081451,13999756.88569726,19691845.17196478,
 22703491.59227475,24170971.37917875,24942600.64649487,25524709.38118453,
 26001270.24248082,26411575.83848036,26777598.60457184,27101544.93848902,
 27395587.32622517,27672588.21193872,27930300.78979662,28174771.85184365,
 28408220.62238739,28628729.72581637,28840388.11863109,29043558.11550988,
 29240922.52643442,29433107.00626163,29621449.38697027,29806449.94266262,
 29988666.46150973,30169799.06841858,30350918.22632762,30532592.34167128,
 30715194.60560981,30898723.82731659,31082768.33753654,31266969.10465112,
 31451249.47999566,31635852.69993231,31821081.44956386,32006980.17397952,
 32193274.46343539,32379650.83377385,32566099.15293684,32752502.54290431,
 32938607.57477695,33123651.2940545 ,33310605.00193656,33504053.41060361,
 33703527.95038555,33886436.1516322 ,34023841.37328379])
spl = np.array([143.30716391,112.04549567,107.16606044,100.07992422, 95.72234382,
  88.66399132, 85.72615572, 83.99727641, 82.45432412, 81.6080623 ,
  80.65608227, 79.65887532, 79.14698292, 78.78719944, 78.04602281,
  78.10834693, 77.23132019, 77.11803856, 76.75782923, 76.61605698,
  76.47392628, 76.29933683, 76.32318556, 76.13455598, 75.90041117,
  75.55328471, 75.20099444, 74.8369466 , 74.38739305, 73.93752785,
  73.61273813, 73.41236642, 73.22605566, 72.95809247, 72.62797665,
  72.33871599, 72.13652439, 71.94564986, 71.69401612, 71.47696423,
  71.44560867, 71.29371992, 71.56718644, 71.39361342, 70.80671648,
  65.74950351, 61.37219754])
"""
print(np.array2string(sim['cruisepower'].flatten(),separator=','))
print(np.array2string(sim['v'],separator=','))
"""


import matplotlib.pyplot as plt
from scipy.interpolate import make_interp_spline
plt.rcParams["font.family"] = "Times New Roman"
plt.rcParams.update({'font.size': 12})

"""
plt.rcParams['figure.figsize'] = [11, 2.5]

num = 10000
x_p = np.linspace(0,x_lim,num)
obs_p = sm.predict_values(x_p)
# plt.text(5000, 50, 'No Fly Zone', color='red', fontsize=12,bbox={'facecolor': 'white', 'alpha': 0.8, 'pad': 3})

target_altitude = np.ones(47)*300
plt.plot(xe,target_altitude,color='k',linestyle='dashed',linewidth=1)

plt.scatter(xe,he,color='blue',marker='^')
plt.fill_between(x_p,obs_p.flatten(),alpha=0.8,color='mistyrose',hatch='///',edgecolor='indianred')
plt.legend(['target altitude', 'minimum energy', 'no-fly zone'], frameon=False)

plt.plot(x_p,obs_p,'k',linewidth=0.5)
plt.xlabel('horizontal position (m)')
plt.ylabel('altitude (m)')

eSpline = make_interp_spline(xe,he)
ixe = np.linspace(xe.min(), xe.max(), 500)
ihe = eSpline(ixe)
plt.plot(ixe,ihe,color='blue')

plt.xlim(0,xe.max())
plt.ylim(0,350)

#plt.savefig('res_nfz', dpi=1200, bbox_inches='tight')
plt.show()
"""

"""
# region cruisepower
plt.rcParams['figure.figsize'] = [5, 2]

max_cruise_power = np.ones(47)*468300
plt.plot(te,max_cruise_power,color='k',linestyle='dashed',linewidth=1)

plt.scatter(te,cruise_power,color='blue',marker='^')

plt.legend(['maximum available cruise rotor power', 'cruise rotor power'], frameon=False)

eSpline = make_interp_spline(te,cruise_power)
ixe = np.linspace(te.min(), te.max(), 500)
ihe = eSpline(ixe)
plt.plot(ixe,ihe,color='blue')

plt.xlabel('time (s)')
plt.ylabel('power (W)')
#plt.savefig('cpwr_nfz', dpi=1200, bbox_inches='tight')
plt.show()
# endregion
"""

"""
# region liftpower
plt.rcParams['figure.figsize'] = [5, 2]

max_lift_power = np.ones(47)*143652
plt.plot(te,max_lift_power,color='k',linestyle='dashed',linewidth=1)

plt.scatter(te,lift_power,color='blue',marker='^')

plt.legend(['maximum available lift rotor power', 'lift rotor power'], frameon=False)

eSpline = make_interp_spline(te,lift_power)
ixe = np.linspace(te.min(), te.max(), 500)
ihe = eSpline(ixe)
plt.plot(ixe,ihe,color='blue')

plt.xlabel('time (s)')
plt.ylabel('power (W)')
plt.savefig('lpwr_nfz', dpi=1200, bbox_inches='tight')
plt.show()
# endregion
"""

"""
# region energy
plt.rcParams['figure.figsize'] = [5, 2]

plt.scatter(te,e/1e6,color='blue',marker='^')
plt.legend(['energy'], frameon=False)

eSpline = make_interp_spline(te,e/1e6)
ixe = np.linspace(te.min(), te.max(), 500)
ihe = eSpline(ixe)
plt.plot(ixe,ihe,color='blue')

plt.xlabel('time (s)')
plt.ylabel('energy (MJ)')
plt.savefig('e_nfz', dpi=1200, bbox_inches='tight')
plt.show()
# endregion
"""

# region spl
plt.rcParams['figure.figsize'] = [5, 2]

plt.scatter(te,spl,color='blue',marker='^')
plt.legend(['maximum ground-level SPL'], frameon=False)

eSpline = make_interp_spline(te,spl)
ixe = np.linspace(te.min(), te.max(), 500)
ihe = eSpline(ixe)
plt.plot(ixe,ihe,color='blue')

plt.xlabel('time (s)')
plt.ylabel('SPL (db)')
plt.savefig('spl_nfz', dpi=1200, bbox_inches='tight')
plt.show()
# endregion