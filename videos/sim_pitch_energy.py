from vedo import *
import numpy as np
from scipy.interpolate import make_interp_spline

#region data 15deg
xe = np.array([   0.        ,  50.06721479, 147.72844893, 267.12042972, 400.92796725,
  547.58747443, 704.42553236, 869.08366802,1037.93760491,1209.68998621,
 1383.21458369,1558.15989365,1733.95067005,1910.21144712,2086.52960811,
 2262.82899669,2439.24587419,2615.61673855,2792.01857526,2968.51878278,
 3145.0261581 ,3321.0974386 ,3496.48421081,3671.01102853,3844.19566894,
 4015.09636221,4182.48326435,4344.74623   ,4501.13155315,4650.74491289])
he = np.array([ 0.00000000e+00,-5.11541281e-02,-2.18884992e-02, 1.71319279e-01,
  2.41814594e-03, 4.88322107e-02, 7.05904705e-01, 7.17412233e+00,
  1.65513456e+01, 2.73839683e+01, 3.93861649e+01, 5.16328105e+01,
  6.47667862e+01, 7.79004396e+01, 9.16868788e+01, 1.05429057e+02,
  1.19431445e+02, 1.33496826e+02, 1.47504576e+02, 1.61820994e+02,
  1.76161796e+02, 1.90583756e+02, 2.04742870e+02, 2.18944905e+02,
  2.33537050e+02, 2.48290845e+02, 2.62793351e+02, 2.76773600e+02,
  2.89688094e+02, 3.00013472e+02])
ae = np.array([ 1.42123209e-01, 1.76073310e-01, 1.07202785e-01, 9.10131759e-02,
  5.92747538e-02, 3.27140685e-02, 2.91136069e-02, 1.17596110e-02,
  6.96675126e-03, 4.09660168e-03, 4.99623419e-04, 1.04444966e-03,
 -1.72713113e-03,-6.23128221e-05,-1.48765550e-03,-5.64924822e-04,
 -9.47091335e-04,-9.48926255e-04,-2.17943710e-04,-9.59158500e-04,
 -1.29211307e-04, 8.15823256e-05, 1.66029097e-03, 3.44079898e-03,
  5.53011843e-03, 8.90923707e-03, 1.58328366e-02, 2.37257912e-02,
  3.97175737e-02, 2.70434354e-02])
ge = np.array([ 0.        ,-0.01532805, 0.00487486,-0.00177714,-0.00072891,-0.0012127 ,
  0.01909154, 0.05181007, 0.05901491, 0.06701304, 0.06932209, 0.07234336,
  0.07460254, 0.07605124, 0.07837491, 0.07814394, 0.07980113, 0.07915297,
  0.0800664 , 0.08105773, 0.08152309, 0.08124574, 0.08034972, 0.08240805,
  0.08540834, 0.08615339, 0.086857  , 0.08320217, 0.08543147, 0.02913596])
thetae = ae + ge

#45deg
xt = np.array([   0.        ,  40.62649904, 115.10506221, 206.11473077, 306.25874796,
  413.68803898, 528.04900835, 649.25421229, 777.48614926, 911.91248475,
 1049.61003153,1187.47883726,1323.95583296,1459.00434477,1593.38405635,
 1727.88312868,1862.92805049,1998.50120164,2134.26579844,2269.81517639,
 2404.94247463,2539.84659704,2675.19461018,2811.90076106,2950.55346622,
 3090.47959579,3228.81691677,3361.11655888,3484.78392912,3603.57759808])
ht = np.array([ 0.00000000e+00,-5.31659646e-02,-2.31294186e-02,-1.60519082e-03,
  2.76887994e-02, 9.69377456e-02, 1.24423028e-01, 1.31114364e-01,
  1.82331341e-01, 3.82196846e+00, 1.38155608e+01, 2.86765758e+01,
  4.53475733e+01, 6.12750055e+01, 7.54352445e+01, 8.82164923e+01,
  1.00506142e+02, 1.13123709e+02, 1.26508708e+02, 1.40570732e+02,
  1.54750053e+02, 1.68192923e+02, 1.80223373e+02, 1.90903711e+02,
  2.01533145e+02, 2.14995096e+02, 2.34518961e+02, 2.60234719e+02,
  2.86004964e+02, 3.00001351e+02])
at = np.array([0.78530325,0.4702343 ,0.18905535,0.14087707,0.10172744,0.07235467,
 0.05330951,0.03261601,0.02568995,0.02058693,0.01337855,0.00957653,
 0.00825776,0.00909056,0.01094019,0.01206709,0.01250096,0.01256135,
 0.01244276,0.01228232,0.01173845,0.0108125 ,0.00961938,0.00865769,
 0.00988108,0.01453278,0.02106852,0.02737412,0.02018726,0.00620727])
gt = np.array([ 0.00000000e+00, 1.26671237e-05,-2.73185464e-03, 9.47833976e-06,
  5.22471117e-04, 5.41052324e-04, 6.26369491e-04,-2.05408325e-03,
  8.34990648e-03, 4.89712857e-02, 9.31586336e-02, 1.18089050e-01,
  1.21935641e-01, 1.11621350e-01, 9.89735862e-02, 9.15997341e-02,
  9.08945738e-02, 9.52447863e-02, 1.01197707e-01, 1.04914923e-01,
  1.03108179e-01, 9.46234431e-02, 8.26683201e-02, 7.46169110e-02,
  8.17227449e-02, 1.14412973e-01, 1.67592886e-01, 2.11585151e-01,
  1.80866133e-01, 3.96148542e-02])
thetat = at + gt



# interpolate data
n = 500
num = 30
dte = 3.39952608
dtt = 2.76893345
# linear time vector and interpolated time vector
tvece = np.linspace(0,num*dte,num)
tvect = np.linspace(0,num*dtt,num)
tie = np.linspace(tvece.min(), tvece.max(), n)
tit = np.linspace(tvect.min(), tvect.max(), int(n*dtt/dte))
# data splines
xse = make_interp_spline(tvece,xe)
hse = make_interp_spline(tvece,he)
tse = make_interp_spline(tvece,thetae)
xst = make_interp_spline(tvect,xt)
hst = make_interp_spline(tvect,ht)
tst = make_interp_spline(tvect,thetat)
# interpolated data splines
pad = np.ones(len(tie)-len(tit))
xie = xse(tie)
hie = hse(tie)
tie = tse(tie)
xit = np.concatenate((xst(tit), pad*xt[-1]))
hit = np.concatenate((hst(tit), pad*ht[-1]))
tit = np.concatenate((tst(tit), pad*thetat[-1]))


#endregion

m1 = Mesh('lpc.stl').scale(20).rotate_z(180)
m1.c('royalblue').lighting('glossy').phong()
m2 = m1.clone()
m2.c('navy').lighting('glossy').phong()

m1.pos(0, 0, 0).add_trail(n=2000,lw=4,offset=(-50,0,50),c='royalblue')
m2.pos(0, 0, 0).add_trail(n=2000,lw=4,offset=(-50,0,50),c='navy')

# Setup the scene
cam = dict(
    position=(2200, -9500, 0),
    focal_point=(2200, 0, 0),
    viewup=(0, 0, 1),
    distance=0,
)
plt = Plotter(axes=0, interactive=False)


video = Video('lpc_pitch_energy.mp4', duration=None, fps=50, backend="cv")


index = 0
tref_e,tref_t = 0,0
for t in np.arange(0, n, 1):
    m1.rotate_y(-1*np.rad2deg(tie[index] - tref_e))
    m2.rotate_y(-1*np.rad2deg(tit[index] - tref_t))
    tref_e = tie[index]
    tref_t = tit[index]
    m1.pos(xie[index], 0, 1.5*hie[index])
    m2.pos(xit[index], 0, 1.5*hit[index])
    index += 1

    plt.show(m1,m2, __doc__, axes=0, viewup="z",camera=cam,rate=2000,bg=[240,248,255])
    video.add_frame()

#video.action(cameras=cam)
video.close() 
plt.interactive().close()